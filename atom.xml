<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>qiudx&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.qiudx.top/"/>
  <updated>2020-01-09T02:21:30.179Z</updated>
  <id>https://www.qiudx.top/</id>
  
  <author>
    <name>qiudx</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>tomcat apr模式</title>
    <link href="https://www.qiudx.top/2020/01/09/tomcat-apr%E6%A8%A1%E5%BC%8F/"/>
    <id>https://www.qiudx.top/2020/01/09/tomcat-apr%E6%A8%A1%E5%BC%8F/</id>
    <published>2020-01-08T16:12:12.000Z</published>
    <updated>2020-01-09T02:21:30.179Z</updated>
    
    <content type="html"><![CDATA[<p><strong>概要</strong></p><ul><li>开启apr需要的环境</li><li>环境搭建</li><li>开启apr模式<ul><li>spring boot</li><li>tomcat</li></ul></li></ul><a id="more"></a><h2 id="相关文件"><a href="#相关文件" class="headerlink" title="相关文件"></a>相关文件</h2><ol><li><a href="http://apr.apache.org/download.cgi" target="_blank" rel="noopener">APR library</a></li><li><a href="https://www.openssl.org/source/" target="_blank" rel="noopener">OpenSSL libraries</a></li><li><a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">Java SE Development Kit (JDK)</a></li><li><a href="http://tomcat.apache.org/download-native.cgi" target="_blank" rel="noopener">tomcat native</a></li></ol><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="1-apr安装"><a href="#1-apr安装" class="headerlink" title="1.apr安装"></a>1.apr安装</h3><p>解压apr包,默认安装目录在 /usr/local/apr 可以通过–prefix=xxx修改</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> apr &amp;&amp; sudo ./configure &amp;&amp; sudo make &amp;&amp; sudo make install</span><br></pre></td></tr></table></figure><h3 id="2-openssl安装"><a href="#2-openssl安装" class="headerlink" title="2.openssl安装"></a>2.openssl安装</h3><h4 id="Mac系统"><a href="#Mac系统" class="headerlink" title="Mac系统"></a>Mac系统</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install openssl</span><br></pre></td></tr></table></figure><h4 id="linux系统"><a href="#linux系统" class="headerlink" title="linux系统"></a>linux系统</h4><p>In debian based Linux those dependencies could be installed by something like:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install libapr1.0-dev libssl-dev</span><br></pre></td></tr></table></figure><p>In rpm based Linux those dependencies could be installed by something like:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install apr-devel openssl-devel</span><br></pre></td></tr></table></figure><h3 id="3-tomcat-native安装"><a href="#3-tomcat-native安装" class="headerlink" title="3.tomcat-native安装"></a>3.tomcat-native安装</h3><p>下载tomcat-native 然后解压。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /tomcat-native/native/  -\</span><br><span class="line">&amp;&amp; sudo ./configure --with-apr=/usr/<span class="built_in">local</span>/apr --with-ssl=/usr/<span class="built_in">local</span>/opt/openssl -\</span><br><span class="line">--with-java-home=此处换成你本地的jdk地址指定到jdk目录<span class="comment">#/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home -\</span></span><br><span class="line">&amp;&amp; sudo make &amp;&amp; sudo make install</span><br></pre></td></tr></table></figure><p>编译成功后，会在/usr/local/apr/lib下有libtcnative-1.0.dylib的库文件，这个就是tomcat启动的依赖库</p><p>需要把该文件拷贝到jdk的Extensions目录下就行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cp /usr/<span class="built_in">local</span>/apr/lib/libtcnative-1.dylib /Library/Java/Extensions/</span><br></pre></td></tr></table></figure><h2 id="开启apr模式"><a href="#开启apr模式" class="headerlink" title="开启apr模式"></a>开启apr模式</h2><h3 id="spring-boot中开启apr模式"><a href="#spring-boot中开启apr模式" class="headerlink" title="spring boot中开启apr模式"></a>spring boot中开启apr模式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> TomcatServletWebServerFactory <span class="title">tomcatServletWebServerFactory</span><span class="params">()</span></span>&#123;</span><br><span class="line">    TomcatServletWebServerFactory serverFactory = <span class="keyword">new</span> TomcatServletWebServerFactory();</span><br><span class="line">    <span class="comment">//设置协议为http1.1</span></span><br><span class="line">  serverFactory.setProtocol(Constants.HTTP_11);</span><br><span class="line"></span><br><span class="line">    Collection&lt;LifecycleListener&gt; listeners = serverFactory.getContextLifecycleListeners();</span><br><span class="line">    listeners.forEach(lifecycleListener -&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (lifecycleListener <span class="keyword">instanceof</span> AprLifecycleListener) &#123;</span><br><span class="line">            AprLifecycleListener aprLifecycleListener = (AprLifecycleListener) lifecycleListener;</span><br><span class="line">            <span class="comment">//使用apr</span></span><br><span class="line">          aprLifecycleListener.setUseAprConnector(<span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> serverFactory;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="tomcat"><a href="#tomcat" class="headerlink" title="tomcat"></a>tomcat</h3><ol><li><p>修改protocol值<br>Tomcat默认是HTTP/1.1，如果运行apr模式需要把protocol值修改成apr模式：org.apache.coyote.http11.Http11AprProtocol</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vi server.xml</span></span><br><span class="line">&lt;Connector port=<span class="string">"8080"</span> protocol=<span class="string">"org.apache.coyote.http11.Http11AprProtocol"</span></span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>修改SSLEngine</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vi server.xml</span></span><br><span class="line">&lt;Listener className=<span class="string">"org.apache.catalina.core.AprLifecycleListener"</span> SSLEngine=<span class="string">"off"</span> /&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="压测"><a href="#压测" class="headerlink" title="压测"></a>压测</h2><p><img src="/images/image-20200108233803537.png" alt="image-20200108233803537"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>AprEndpoint：用C实现，通过JNI调用的。主要提升对静态资源（如HTML、图片、CSS、JS等）的访问性能。</li><li>AprEndpoint和NioEndpoint在性能上基本接近</li></ul><p>结论：前后端分离的项目推荐使用Nio方式，不分离项目可以尝试开启apr模式</p><p><code>apr模式需要环境支持</code></p><h2 id="tomca英文文档"><a href="#tomca英文文档" class="headerlink" title="tomca英文文档"></a>tomca英文文档</h2><p><a href="http://tomcat.apache.org/native-doc/" target="_blank" rel="noopener">http://tomcat.apache.org/native-doc/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;概要&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;开启apr需要的环境&lt;/li&gt;&lt;li&gt;环境搭建&lt;/li&gt;&lt;li&gt;开启apr模式&lt;ul&gt;&lt;li&gt;spring boot&lt;/li&gt;&lt;li&gt;tomcat&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="java" scheme="https://www.qiudx.top/categories/java/"/>
    
    
      <category term="java" scheme="https://www.qiudx.top/tags/java/"/>
    
      <category term="tomcat" scheme="https://www.qiudx.top/tags/tomcat/"/>
    
  </entry>
  
  <entry>
    <title>Tomcat Lifecycle</title>
    <link href="https://www.qiudx.top/2020/01/08/Tomcat-Lifecycle/"/>
    <id>https://www.qiudx.top/2020/01/08/Tomcat-Lifecycle/</id>
    <published>2020-01-08T03:11:42.000Z</published>
    <updated>2020-01-08T04:59:10.367Z</updated>
    
    <content type="html"><![CDATA[<p><strong>概要</strong></p><ul><li>什么是Lifecycle</li><li>Lifecycle中的方法</li><li>LifecycleBase</li><li>tomcat启动图</li></ul><a id="more"></a><h2 id="什么是Lifecycle"><a href="#什么是Lifecycle" class="headerlink" title="什么是Lifecycle"></a>什么是Lifecycle</h2><p>Lifecycle，其实就是一个状态机，对组件的由生到死状态的管理。如下图所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">*            start()</span><br><span class="line">*  -----------------------------</span><br><span class="line">*  |                           |</span><br><span class="line">*  | init()                    |</span><br><span class="line">* NEW -»-- INITIALIZING        |</span><br><span class="line">* | |           |              |     ------------------«-----------------------</span><br><span class="line">* | |           |auto          |     |                                        |</span><br><span class="line">* | |          \|/    start() \|/   \|/     <span class="function">auto          auto         <span class="title">stop</span><span class="params">()</span> |</span></span><br><span class="line"><span class="function">* | |      INITIALIZED --»-- STARTING_PREP --»- STARTING --»- STARTED --»---  |</span></span><br><span class="line"><span class="function">* | |         |                                                            |  |</span></span><br><span class="line"><span class="function">* | |<span class="title">destroy</span><span class="params">()</span>|                                                            |  |</span></span><br><span class="line"><span class="function">* | --»-----«--    ------------------------«--------------------------------  ^</span></span><br><span class="line"><span class="function">* |     |          |                                                          |</span></span><br><span class="line"><span class="function">* |     |         \|/          auto                 auto              <span class="title">start</span><span class="params">()</span> |</span></span><br><span class="line"><span class="function">* |     |     STOPPING_PREP ----»---- STOPPING ------»----- STOPPED -----»-----</span></span><br><span class="line"><span class="function">* |    \|/                               ^                     |  ^</span></span><br><span class="line"><span class="function">* |     |               <span class="title">stop</span><span class="params">()</span>           |                     |  |</span></span><br><span class="line"><span class="function">* |     |       --------------------------                     |  |</span></span><br><span class="line"><span class="function">* |     |       |                                              |  |</span></span><br><span class="line"><span class="function">* |     |       |    <span class="title">destroy</span><span class="params">()</span>                       <span class="title">destroy</span><span class="params">()</span> |  |</span></span><br><span class="line"><span class="function">* |     |    FAILED ----»------ DESTROYING ---«-----------------  |</span></span><br><span class="line"><span class="function">* |     |                        ^     |                          |</span></span><br><span class="line"><span class="function">* |     |     <span class="title">destroy</span><span class="params">()</span>          |     |auto                      |</span></span><br><span class="line"><span class="function">* |     --------»-----------------    \|/                         |</span></span><br><span class="line"><span class="function">* |                                 DESTROYED                     |</span></span><br><span class="line"><span class="function">* |                                                               |</span></span><br><span class="line"><span class="function">* |                            <span class="title">stop</span><span class="params">()</span>                             |</span></span><br><span class="line"><span class="function">* ----»-----------------------------»------------------------------</span></span><br></pre></td></tr></table></figure><p>生命周期状态图</p><ol><li>当组件在<code>STARTING_PREP</code>、<code>STARTING</code>或<code>STARTED</code>时，调用<code>start()</code>方法没有任何效果</li><li>当组件在<code>NEW</code>状态时，调用<code>start()</code>方法会导致<code>init()</code>方法被立刻执行，随后<code>start()</code>方法被执行</li><li>当组件在<code>STOPPING_PREP</code>、<code>STOPPING</code>或<code>STOPPED</code>时，调用<code>stop()</code>方法没有任何效果</li><li>当一个组件在<code>NEW</code>状态时，调用<code>stop()</code>方法会将组件状态变更为<code>STOPPED</code>，比较典型的场景就是组件启动失败，其子组件还没有启动。当一个组件停止的时候，它将尝试停止它下面的所有子组件，即使子组件还没有启动。</li></ol><h2 id="Lifecycle中的方法"><a href="#Lifecycle中的方法" class="headerlink" title="Lifecycle中的方法"></a>Lifecycle中的方法</h2><p>Lifecycle有哪些方法，如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public interface Lifecycle &#123;</span><br><span class="line">    &#x2F;&#x2F; 添加监听器</span><br><span class="line">    public void addLifecycleListener(LifecycleListener listener);</span><br><span class="line">    &#x2F;&#x2F; 获取所以监听器</span><br><span class="line">    public LifecycleListener[] findLifecycleListeners();</span><br><span class="line">    &#x2F;&#x2F; 移除某个监听器</span><br><span class="line">    public void removeLifecycleListener(LifecycleListener listener);</span><br><span class="line">    &#x2F;&#x2F; 初始化方法</span><br><span class="line">    public void init() throws LifecycleException;</span><br><span class="line">    &#x2F;&#x2F; 启动方法</span><br><span class="line">    public void start() throws LifecycleException;</span><br><span class="line">    &#x2F;&#x2F; 停止方法，和start对应</span><br><span class="line">    public void stop() throws LifecycleException;</span><br><span class="line">    &#x2F;&#x2F; 销毁方法，和init对应</span><br><span class="line">    public void destroy() throws LifecycleException;</span><br><span class="line">    &#x2F;&#x2F; 获取生命周期状态</span><br><span class="line">    public LifecycleState getState();</span><br><span class="line">    &#x2F;&#x2F; 获取字符串类型的生命周期状态</span><br><span class="line">    public String getStateName();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这些方法基本上都会抛出异常-<code>LifecycleException</code>。同时这些方法都非常简单，也很容易懂，在此不再赘述。</p><h2 id="LifecycleBase"><a href="#LifecycleBase" class="headerlink" title="LifecycleBase"></a>LifecycleBase</h2><p><code>LifecycleBase</code>是<code>Lifecycle</code>的基本实现。看下Lifecycle中的方法。</p><h3 id="1-增加、删除和获取监听器"><a href="#1-增加、删除和获取监听器" class="headerlink" title="1.增加、删除和获取监听器"></a>1.增加、删除和获取监听器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">private final List&lt;LifecycleListener&gt; lifecycleListeners &#x3D; new CopyOnWriteArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void addLifecycleListener(LifecycleListener listener) &#123;</span><br><span class="line">    lifecycleListeners.add(listener);</span><br><span class="line">&#125;</span><br><span class="line">@Override</span><br><span class="line">public LifecycleListener[] findLifecycleListeners() &#123;</span><br><span class="line">    return lifecycleListeners.toArray(new LifecycleListener[0]);</span><br><span class="line">&#125;</span><br><span class="line">@Override</span><br><span class="line">public void removeLifecycleListener(LifecycleListener listener) &#123;</span><br><span class="line">    lifecycleListeners.remove(listener);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>生命周期监听器保存在一个线程安全的List中，<code>CopyOnWriteArrayList</code>。所以add和remove都是直接调用此List的相应方法。</li><li>findLifecycleListeners返回的是一个数组，为了线程安全，所以这儿会生成一个新数组。</li></ol><h3 id="2-init"><a href="#2-init" class="headerlink" title="2.init()"></a>2.init()</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public final synchronized void init() throws LifecycleException &#123;</span><br><span class="line">    &#x2F;&#x2F; 非NEW状态，不允许调用init()方法</span><br><span class="line">    if (!state.equals(LifecycleState.NEW)) &#123;</span><br><span class="line">        invalidTransition(Lifecycle.BEFORE_INIT_EVENT);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        &#x2F;&#x2F; 初始化逻辑之前，先将状态变更为&#96;INITIALIZING&#96;</span><br><span class="line">        setStateInternal(LifecycleState.INITIALIZING, null, false);</span><br><span class="line">        &#x2F;&#x2F; 初始化，该方法为一个abstract方法，需要组件自行实现</span><br><span class="line">        initInternal();</span><br><span class="line">        &#x2F;&#x2F; 初始化完成之后，状态变更为&#96;INITIALIZED&#96;</span><br><span class="line">        setStateInternal(LifecycleState.INITIALIZED, null, false);</span><br><span class="line">    &#125; catch (Throwable t) &#123;</span><br><span class="line">        &#x2F;&#x2F; 初始化的过程中，可能会有异常抛出，这时需要捕获异常，并将状态变更为&#96;FAILED&#96;</span><br><span class="line">        ExceptionUtils.handleThrowable(t);</span><br><span class="line">        setStateInternal(LifecycleState.FAILED, null, false);</span><br><span class="line">        throw new LifecycleException(</span><br><span class="line">                sm.getString(&quot;lifecycleBase.initFail&quot;,toString()), t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再来看看<code>invalidTransition</code>方法，该方法直接抛出异常。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">private void invalidTransition(String type) throws LifecycleException &#123;</span><br><span class="line">    String msg &#x3D; sm.getString(&quot;lifecycleBase.invalidTransition&quot;, type,</span><br><span class="line">            toString(), state);</span><br><span class="line">    throw new LifecycleException(msg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>setStateInternal</code>方法用于维护状态，同时在状态转换成功之后触发事件。为了状态的可见性，所以state声明为volatile类型的。</p><p><code>private volatile LifecycleState state = LifecycleState.NEW;</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">private synchronized void setStateInternal(LifecycleState state,</span><br><span class="line">        Object data, boolean check) throws LifecycleException &#123;</span><br><span class="line">    if (log.isDebugEnabled()) &#123;</span><br><span class="line">        log.debug(sm.getString(&quot;lifecycleBase.setState&quot;, this, state));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 是否校验状态</span><br><span class="line">    if (check) &#123;</span><br><span class="line">        &#x2F;&#x2F; Must have been triggered by one of the abstract methods (assume</span><br><span class="line">        &#x2F;&#x2F; code in this class is correct)</span><br><span class="line">        &#x2F;&#x2F; null is never a valid state</span><br><span class="line">        &#x2F;&#x2F; state不允许为null</span><br><span class="line">        if (state &#x3D;&#x3D; null) &#123;</span><br><span class="line">            invalidTransition(&quot;null&quot;);</span><br><span class="line">            &#x2F;&#x2F; Unreachable code - here to stop eclipse complaining about</span><br><span class="line">            &#x2F;&#x2F; a possible NPE further down the method</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; Any method can transition to failed</span><br><span class="line">        &#x2F;&#x2F; startInternal() permits STARTING_PREP to STARTING</span><br><span class="line">        &#x2F;&#x2F; stopInternal() permits STOPPING_PREP to STOPPING and FAILED to</span><br><span class="line">        &#x2F;&#x2F; STOPPING</span><br><span class="line">        if (!(state &#x3D;&#x3D; LifecycleState.FAILED ||</span><br><span class="line">                (this.state &#x3D;&#x3D; LifecycleState.STARTING_PREP &amp;&amp;</span><br><span class="line">                        state &#x3D;&#x3D; LifecycleState.STARTING) ||</span><br><span class="line">                (this.state &#x3D;&#x3D; LifecycleState.STOPPING_PREP &amp;&amp;</span><br><span class="line">                        state &#x3D;&#x3D; LifecycleState.STOPPING) ||</span><br><span class="line">                (this.state &#x3D;&#x3D; LifecycleState.FAILED &amp;&amp;</span><br><span class="line">                        state &#x3D;&#x3D; LifecycleState.STOPPING))) &#123;</span><br><span class="line">            &#x2F;&#x2F; No other transition permitted</span><br><span class="line">            invalidTransition(state.name());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 设置状态</span><br><span class="line">    this.state &#x3D; state;</span><br><span class="line">    &#x2F;&#x2F; 触发事件</span><br><span class="line">    String lifecycleEvent &#x3D; state.getLifecycleEvent();</span><br><span class="line">    if (lifecycleEvent !&#x3D; null) &#123;</span><br><span class="line">        fireLifecycleEvent(lifecycleEvent, data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-start"><a href="#3-start" class="headerlink" title="3.start()"></a>3.start()</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public final synchronized void start() throws LifecycleException &#123;</span><br><span class="line">    &#x2F;&#x2F; &#96;STARTING_PREP&#96;、&#96;STARTING&#96;和&#96;STARTED时，将忽略start()逻辑</span><br><span class="line">    if (LifecycleState.STARTING_PREP.equals(state) || LifecycleState.STARTING.equals(state) ||</span><br><span class="line">            LifecycleState.STARTED.equals(state)) &#123;</span><br><span class="line"></span><br><span class="line">        if (log.isDebugEnabled()) &#123;</span><br><span class="line">            Exception e &#x3D; new LifecycleException();</span><br><span class="line">            log.debug(sm.getString(&quot;lifecycleBase.alreadyStarted&quot;, toString()), e);</span><br><span class="line">        &#125; else if (log.isInfoEnabled()) &#123;</span><br><span class="line">            log.info(sm.getString(&quot;lifecycleBase.alreadyStarted&quot;, toString()));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; &#96;NEW&#96;状态时，执行init()方法</span><br><span class="line">    if (state.equals(LifecycleState.NEW)) &#123;</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; &#96;FAILED&#96;状态时，执行stop()方法</span><br><span class="line">    else if (state.equals(LifecycleState.FAILED)) &#123;</span><br><span class="line">        stop();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 不是&#96;INITIALIZED&#96;和&#96;STOPPED&#96;时，则说明是非法的操作</span><br><span class="line">    else if (!state.equals(LifecycleState.INITIALIZED) &amp;&amp;</span><br><span class="line">            !state.equals(LifecycleState.STOPPED)) &#123;</span><br><span class="line">        invalidTransition(Lifecycle.BEFORE_START_EVENT);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        &#x2F;&#x2F; start前的状态设置</span><br><span class="line">        setStateInternal(LifecycleState.STARTING_PREP, null, false);</span><br><span class="line">        &#x2F;&#x2F; start逻辑，抽象方法，由组件自行实现</span><br><span class="line">        startInternal();</span><br><span class="line">        &#x2F;&#x2F; start过程中，可能因为某些原因失败，这时需要stop操作</span><br><span class="line">        if (state.equals(LifecycleState.FAILED)) &#123;</span><br><span class="line">            &#x2F;&#x2F; This is a &#39;controlled&#39; failure. The component put itself into the</span><br><span class="line">            &#x2F;&#x2F; FAILED state so call stop() to complete the clean-up.</span><br><span class="line">            stop();</span><br><span class="line">        &#125; else if (!state.equals(LifecycleState.STARTING)) &#123;</span><br><span class="line">            &#x2F;&#x2F; Shouldn&#39;t be necessary but acts as a check that sub-classes are</span><br><span class="line">            &#x2F;&#x2F; doing what they are supposed to.</span><br><span class="line">            invalidTransition(Lifecycle.AFTER_START_EVENT);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            &#x2F;&#x2F; 设置状态为STARTED</span><br><span class="line">            setStateInternal(LifecycleState.STARTED, null, false);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch (Throwable t) &#123;</span><br><span class="line">        &#x2F;&#x2F; This is an &#39;uncontrolled&#39; failure so put the component into the</span><br><span class="line">        &#x2F;&#x2F; FAILED state and throw an exception.</span><br><span class="line">        ExceptionUtils.handleThrowable(t);</span><br><span class="line">        setStateInternal(LifecycleState.FAILED, null, false);</span><br><span class="line">        throw new LifecycleException(sm.getString(&quot;lifecycleBase.startFail&quot;, toString()), t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-stop"><a href="#4-stop" class="headerlink" title="4.stop()"></a>4.stop()</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public final synchronized void stop() throws LifecycleException &#123;</span><br><span class="line">    &#x2F;&#x2F; &#96;STOPPING_PREP&#96;、&#96;STOPPING&#96;和STOPPED时，将忽略stop()的执行</span><br><span class="line">    if (LifecycleState.STOPPING_PREP.equals(state) || LifecycleState.STOPPING.equals(state) ||</span><br><span class="line">            LifecycleState.STOPPED.equals(state)) &#123;</span><br><span class="line"></span><br><span class="line">        if (log.isDebugEnabled()) &#123;</span><br><span class="line">            Exception e &#x3D; new LifecycleException();</span><br><span class="line">            log.debug(sm.getString(&quot;lifecycleBase.alreadyStopped&quot;, toString()), e);</span><br><span class="line">        &#125; else if (log.isInfoEnabled()) &#123;</span><br><span class="line">            log.info(sm.getString(&quot;lifecycleBase.alreadyStopped&quot;, toString()));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; &#96;NEW&#96;状态时，直接将状态变更为&#96;STOPPED&#96;</span><br><span class="line">    if (state.equals(LifecycleState.NEW)) &#123;</span><br><span class="line">        state &#x3D; LifecycleState.STOPPED;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; stop()的执行，必须要是&#96;STARTED&#96;和&#96;FAILED&#96;</span><br><span class="line">    if (!state.equals(LifecycleState.STARTED) &amp;&amp; !state.equals(LifecycleState.FAILED)) &#123;</span><br><span class="line">        invalidTransition(Lifecycle.BEFORE_STOP_EVENT);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        &#x2F;&#x2F; &#96;FAILED&#96;时，直接触发BEFORE_STOP_EVENT事件</span><br><span class="line">        if (state.equals(LifecycleState.FAILED)) &#123;</span><br><span class="line">            &#x2F;&#x2F; Don&#39;t transition to STOPPING_PREP as that would briefly mark the</span><br><span class="line">            &#x2F;&#x2F; component as available but do ensure the BEFORE_STOP_EVENT is</span><br><span class="line">            &#x2F;&#x2F; fired</span><br><span class="line">            fireLifecycleEvent(BEFORE_STOP_EVENT, null);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            &#x2F;&#x2F; 设置状态为STOPPING_PREP</span><br><span class="line">            setStateInternal(LifecycleState.STOPPING_PREP, null, false);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; stop逻辑，抽象方法，组件自行实现</span><br><span class="line">        stopInternal();</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; Shouldn&#39;t be necessary but acts as a check that sub-classes are</span><br><span class="line">        &#x2F;&#x2F; doing what they are supposed to.</span><br><span class="line">        if (!state.equals(LifecycleState.STOPPING) &amp;&amp; !state.equals(LifecycleState.FAILED)) &#123;</span><br><span class="line">            invalidTransition(Lifecycle.AFTER_STOP_EVENT);</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F; 设置状态为STOPPED</span><br><span class="line">        setStateInternal(LifecycleState.STOPPED, null, false);</span><br><span class="line">    &#125; catch (Throwable t) &#123;</span><br><span class="line">        ExceptionUtils.handleThrowable(t);</span><br><span class="line">        setStateInternal(LifecycleState.FAILED, null, false);</span><br><span class="line">        throw new LifecycleException(sm.getString(&quot;lifecycleBase.stopFail&quot;,toString()), t);</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        if (this instanceof Lifecycle.SingleUse) &#123;</span><br><span class="line">            &#x2F;&#x2F; Complete stop process first</span><br><span class="line">            setStateInternal(LifecycleState.STOPPED, null, false);</span><br><span class="line">            destroy();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-destroy"><a href="#5-destroy" class="headerlink" title="5.destroy()"></a>5.destroy()</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public final synchronized void destroy() throws LifecycleException &#123;</span><br><span class="line">    &#x2F;&#x2F; &#96;FAILED&#96;状态时，直接触发stop()逻辑</span><br><span class="line">    if (LifecycleState.FAILED.equals(state)) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            &#x2F;&#x2F; Triggers clean-up</span><br><span class="line">            stop();</span><br><span class="line">        &#125; catch (LifecycleException e) &#123;</span><br><span class="line">            &#x2F;&#x2F; Just log. Still want to destroy.</span><br><span class="line">            log.warn(sm.getString(</span><br><span class="line">                    &quot;lifecycleBase.destroyStopFail&quot;, toString()), e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; &#96;DESTROYING&#96;和&#96;DESTROYED&#96;时，忽略destroy的执行</span><br><span class="line">    if (LifecycleState.DESTROYING.equals(state) ||</span><br><span class="line">            LifecycleState.DESTROYED.equals(state)) &#123;</span><br><span class="line"></span><br><span class="line">        if (log.isDebugEnabled()) &#123;</span><br><span class="line">            Exception e &#x3D; new LifecycleException();</span><br><span class="line">            log.debug(sm.getString(&quot;lifecycleBase.alreadyDestroyed&quot;, toString()), e);</span><br><span class="line">        &#125; else if (log.isInfoEnabled() &amp;&amp; !(this instanceof Lifecycle.SingleUse)) &#123;</span><br><span class="line">            &#x2F;&#x2F; Rather than have every component that might need to call</span><br><span class="line">            &#x2F;&#x2F; destroy() check for SingleUse, don&#39;t log an info message if</span><br><span class="line">            &#x2F;&#x2F; multiple calls are made to destroy()</span><br><span class="line">            log.info(sm.getString(&quot;lifecycleBase.alreadyDestroyed&quot;, toString()));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 非法状态判断</span><br><span class="line">    if (!state.equals(LifecycleState.STOPPED) &amp;&amp;</span><br><span class="line">            !state.equals(LifecycleState.FAILED) &amp;&amp;</span><br><span class="line">            !state.equals(LifecycleState.NEW) &amp;&amp;</span><br><span class="line">            !state.equals(LifecycleState.INITIALIZED)) &#123;</span><br><span class="line">        invalidTransition(Lifecycle.BEFORE_DESTROY_EVENT);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        &#x2F;&#x2F; destroy前状态设置</span><br><span class="line">        setStateInternal(LifecycleState.DESTROYING, null, false);</span><br><span class="line">       &#x2F;&#x2F; 抽象方法，组件自行实现</span><br><span class="line">        destroyInternal();</span><br><span class="line">        &#x2F;&#x2F; destroy后状态设置</span><br><span class="line">        setStateInternal(LifecycleState.DESTROYED, null, false);</span><br><span class="line">    &#125; catch (Throwable t) &#123;</span><br><span class="line">        ExceptionUtils.handleThrowable(t);</span><br><span class="line">        setStateInternal(LifecycleState.FAILED, null, false);</span><br><span class="line">        throw new LifecycleException(</span><br><span class="line">                sm.getString(&quot;lifecycleBase.destroyFail&quot;,toString()), t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-模板方法"><a href="#6-模板方法" class="headerlink" title="6.模板方法"></a>6.模板方法</h3><p>从上述源码看得出来，<code>LifecycleBase</code>是使用了状态机+模板模式来实现的。模板方法有下面这几个：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 初始化方法</span><br><span class="line">protected abstract void initInternal() throws LifecycleException;</span><br><span class="line">&#x2F;&#x2F; 启动方法</span><br><span class="line">protected abstract void startInternal() throws LifecycleException;</span><br><span class="line">&#x2F;&#x2F; 停止方法</span><br><span class="line">protected abstract void stopInternal() throws LifecycleException;</span><br><span class="line">&#x2F;&#x2F; 销毁方法</span><br><span class="line">protected abstract void destroyInternal() throws LifecycleException;</span><br></pre></td></tr></table></figure><h2 id="tomcat启动图"><a href="#tomcat启动图" class="headerlink" title="tomcat启动图"></a>tomcat启动图</h2><p><img src="/images/image-20200108125723279.png" alt="image-20200108125723279"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;概要&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;什么是Lifecycle&lt;/li&gt;&lt;li&gt;Lifecycle中的方法&lt;/li&gt;&lt;li&gt;LifecycleBase&lt;/li&gt;&lt;li&gt;tomcat启动图&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="java" scheme="https://www.qiudx.top/categories/java/"/>
    
    
      <category term="java" scheme="https://www.qiudx.top/tags/java/"/>
    
      <category term="tomcat" scheme="https://www.qiudx.top/tags/tomcat/"/>
    
  </entry>
  
  <entry>
    <title>Tomcat Endpoint</title>
    <link href="https://www.qiudx.top/2020/01/07/Tomcat-Endpoint/"/>
    <id>https://www.qiudx.top/2020/01/07/Tomcat-Endpoint/</id>
    <published>2020-01-07T08:35:37.000Z</published>
    <updated>2020-01-08T14:57:22.973Z</updated>
    
    <content type="html"><![CDATA[<p><strong>概要</strong></p><ul><li><p>I/O模型</p><ul><li>同步阻塞I/O</li><li>同步非阻塞I/O</li><li>I/O多路复用</li><li>异步 I/O</li></ul></li><li><p>NioEndPoint</p><ul><li>Acceptor</li><li>Poller</li><li>SocketProcessor</li></ul></li></ul><a id="more"></a><h2 id="I-O模型"><a href="#I-O模型" class="headerlink" title="I/O模型"></a>I/O模型</h2><p>UNIX 系统下的 I/O 模型有 5 种：</p><ul><li><p>同步阻塞 I/O</p></li><li><p>同步非阻塞I/O</p></li><li><p>I/O多路复用</p></li><li><p>信号驱动I/O(不了解)</p></li><li><p>异步I/O</p></li></ul><p><code>所谓I/O，就是计算机内存与外部设备之间拷贝数据的过程。</code></p><h3 id="JAVA-I-O模型"><a href="#JAVA-I-O模型" class="headerlink" title="JAVA I/O模型"></a>JAVA I/O模型</h3><p>当用记发起I/O操作后，经历2个步骤</p><ol><li><p>用户线程等待内核将数据从网卡（外设）中拷贝到内核空间</p></li><li><p>内核将数据从内核空间拷贝到用户空间</p></li></ol><h4 id="1-同步阻塞I-O"><a href="#1-同步阻塞I-O" class="headerlink" title="1.同步阻塞I/O"></a>1.同步阻塞I/O</h4><ol><li>用户线程发起read调用后就阻塞了，让出CPU。</li><li>内核等待网卡数据到来，把数据从网卡拷贝到内核空间，接着把数据拷贝到用户空间，再把用户线程叫醒</li><li>用户线程读取数据</li></ol><img src="/images/image-20200108222319840.png" alt="image-20200108222319840" style="zoom:50%"><h4 id="2-同步非阻塞I-O"><a href="#2-同步非阻塞I-O" class="headerlink" title="2.同步非阻塞I/O"></a>2.同步非阻塞I/O</h4><ol><li>用户线程不断的发起read调用,数据没到内核空间时，每次都返回失败</li><li>内核等待网卡数据到来，把数据从网卡拷贝到内核空间</li><li>这一次read调用后线程开始阻塞。在等待数据从内核空间拷贝到用户空间，等数据到用户空间后再把线程叫醒</li></ol><img src="/images/image-20200108222355693.png" alt="image-20200108222355693" style="zoom:50%"><h4 id="3-I-O多路复用"><a href="#3-I-O多路复用" class="headerlink" title="3.I/O多路复用"></a>3.I/O多路复用</h4><ol><li>通过select询问内核数据是否已经到达，select()方法是阻塞的。</li><li>通过read调用命令内核把网卡的数据拷贝到用户空间下，在内核拷贝数据到用户空间的这段时间内线程是阻塞的。一般这种情况下都是用selector在一个死循环内来实现的。</li></ol><p><code>之所以称为多路复用，是因为一个selector可以询问多个连接的数据是否已经到达。</code></p><img src="/images/image-20200108223222709.png" alt="image-20200108223222709" style="zoom:50%"><h4 id="4-异步-I-O"><a href="#4-异步-I-O" class="headerlink" title="4.异步 I/O"></a>4.异步 I/O</h4><ol><li>用户线程发起 read 调用的同时注册一个回调函数,，read 立即返回，</li><li>等内核将数据准备好后，再调用指定的回调函数完成处理,在这个过程中，用户线程一直没有阻塞</li></ol><img src="/images/image-20200108223743840.png" alt="image-20200108223743840" style="zoom:50%"><h2 id="NioEndPoint"><a href="#NioEndPoint" class="headerlink" title="NioEndPoint"></a>NioEndPoint</h2><p>它有三大线程组分别用于处理不同的逻辑：</p><ul><li><code>Acceptor</code>线程：负责监听请求,等待和接收客户端连接。在接收到连接后，创建SocketChannel并将其注册到poller线程。</li><li><code>Poller</code>线程：将SocketChannel放到selector上注册读事件，轮询selector，获取就绪的SelectionKey，并将就绪的SelectionKey（或SocketChannel）委托给工作线程。</li><li><code>SocketProcessor</code>(work)：执行真正的业务逻辑。<br>Acceptor线程和poller线程之间有一个SocketChannel队列，Acceptor线程负责将SocketChannel推送到队列，poller线程负责从队列取出SocketChannel。poller线程从队列取出SocketChannel后，紧接着会把它放到selector上注册读事件。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NioEndpoint</span> </span>&#123;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Start the NIO endpoint, creating acceptor, poller threads.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startInternal</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">  </span><br><span class="line">    ....</span><br><span class="line">        <span class="comment">// Create worker collection</span></span><br><span class="line">        <span class="keyword">if</span> (getExecutor() == <span class="keyword">null</span>) &#123;</span><br><span class="line">            createExecutor();</span><br><span class="line">        &#125;</span><br><span class="line">        initializeConnectionLatch();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Start poller thread</span></span><br><span class="line">        poller = <span class="keyword">new</span> Poller();</span><br><span class="line">        Thread pollerThread = <span class="keyword">new</span> Thread(poller, getName() + <span class="string">"-ClientPoller"</span>);</span><br><span class="line">        pollerThread.setPriority(threadPriority);</span><br><span class="line">        pollerThread.setDaemon(<span class="keyword">true</span>);</span><br><span class="line">      <span class="comment">//调用SynchronizedQueue.poll()，直到拿到PollerEvent</span></span><br><span class="line">        pollerThread.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建接收器，在AbstractEndpoint#startAcceptorThread()中创建Acceptor，然后启动</span></span><br><span class="line">      <span class="comment">//最终调用NioEndpoint#serverSocketAccept(),启动socketServer</span></span><br><span class="line">      <span class="comment">//开始监听，到这Connector启动就结束了</span></span><br><span class="line">      <span class="comment">//Acceptor接收到请求封装成PollerEvent然后放到SynchronizedQueue中</span></span><br><span class="line">      <span class="comment">//NioEndPoint最核心之处，启动Acceptor</span></span><br><span class="line">        startAcceptorThread();</span><br><span class="line"></span><br><span class="line">   &#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//创建了Acceptor线程并启动</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">startAcceptorThread</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        acceptor = <span class="keyword">new</span> Acceptor&lt;&gt;(<span class="keyword">this</span>);</span><br><span class="line">        String threadName = getName() + <span class="string">"-Acceptor"</span>;</span><br><span class="line">        acceptor.setThreadName(threadName);</span><br><span class="line">        Thread t = <span class="keyword">new</span> Thread(acceptor, threadName);</span><br><span class="line">        t.setPriority(getAcceptorThreadPriority());</span><br><span class="line">        t.setDaemon(getDaemon());</span><br><span class="line">        t.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>NioEndPoint的启动，最主要是创建Acceptor线程池，同时监听新请求。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;概要&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;I/O模型&lt;/p&gt;&lt;ul&gt;&lt;li&gt;同步阻塞I/O&lt;/li&gt;&lt;li&gt;同步非阻塞I/O&lt;/li&gt;&lt;li&gt;I/O多路复用&lt;/li&gt;&lt;li&gt;异步 I/O&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;NioEndPoint&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Acceptor&lt;/li&gt;&lt;li&gt;Poller&lt;/li&gt;&lt;li&gt;SocketProcessor&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="java" scheme="https://www.qiudx.top/categories/java/"/>
    
    
      <category term="java" scheme="https://www.qiudx.top/tags/java/"/>
    
      <category term="tomcat" scheme="https://www.qiudx.top/tags/tomcat/"/>
    
  </entry>
  
  <entry>
    <title>Tomcat Connector</title>
    <link href="https://www.qiudx.top/2020/01/04/Tomcat-Connector/"/>
    <id>https://www.qiudx.top/2020/01/04/Tomcat-Connector/</id>
    <published>2020-01-04T06:03:25.000Z</published>
    <updated>2020-01-09T08:42:32.397Z</updated>
    
    <content type="html"><![CDATA[<p><strong>概要</strong></p><ul><li><p>Connector组成</p></li><li><p>Connector分类</p></li><li><p>Conector请求处理流程</p></li><li><p>Connector初始化流程</p></li></ul><a id="more"></a><h2 id="Connector"><a href="#Connector" class="headerlink" title="Connector"></a>Connector</h2><h4 id="1-Connector组成"><a href="#1-Connector组成" class="headerlink" title="1.Connector组成"></a>1.Connector组成</h4><ul><li><p><code>Connector</code>中包含一个<code>ProtocolHandler</code>和<code>Adapter</code></p></li><li><p><code>ProtocolHandler</code>创建对应<code>Endpoint</code>,用来处理请求。</p></li><li><p><code>Adapter</code>是Connector与Container容器之间的一个连接器。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Connector</span> <span class="keyword">extends</span> <span class="title">LifecycleMBeanBase</span>  </span>&#123;</span><br><span class="line">  <span class="comment">// 协议Handler</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> ProtocolHandler protocolHandler;</span><br><span class="line">    <span class="comment">// Coyote adapter.</span></span><br><span class="line">    <span class="keyword">protected</span> Adapter adapter = <span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Connector</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 默认使用nio</span></span><br><span class="line">        <span class="keyword">this</span>(<span class="string">"org.apache.coyote.http11.Http11NioProtocol"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Connector</span><span class="params">(String protocol)</span> </span>&#123; <span class="comment">// 传入协议名称</span></span><br><span class="line">        <span class="keyword">boolean</span> aprConnector = AprLifecycleListener.isAprAvailable() &amp;&amp;</span><br><span class="line">                AprLifecycleListener.getUseAprConnector(); <span class="comment">// 是否开启Apr</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"HTTP/1.1"</span>.equals(protocol) || protocol == <span class="keyword">null</span>) &#123; <span class="comment">// HTTP/1.1</span></span><br><span class="line">            <span class="keyword">if</span> (aprConnector) &#123;</span><br><span class="line">                protocolHandlerClassName = <span class="string">"org.apache.coyote.http11.Http11AprProtocol"</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                protocolHandlerClassName = <span class="string">"org.apache.coyote.http11.Http11NioProtocol"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"AJP/1.3"</span>.equals(protocol)) &#123; <span class="comment">// AJP/1.3</span></span><br><span class="line">            <span class="keyword">if</span> (aprConnector) &#123;</span><br><span class="line">                protocolHandlerClassName = <span class="string">"org.apache.coyote.ajp.AjpAprProtocol"</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                protocolHandlerClassName = <span class="string">"org.apache.coyote.ajp.AjpNioProtocol"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            protocolHandlerClassName = protocol; <span class="comment">// 其他自定义协议实现</span></span><br><span class="line">        &#125;</span><br><span class="line">        ProtocolHandler p = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 反射获取协议处理类</span></span><br><span class="line">            Class&lt;?&gt; clazz = Class.forName(protocolHandlerClassName);</span><br><span class="line">            <span class="comment">// 实例化</span></span><br><span class="line">            p = (ProtocolHandler) clazz.getConstructor().newInstance();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(sm.getString(</span><br><span class="line">                    <span class="string">"coyoteConnector.protocolHandlerInstantiationFailed"</span>), e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.protocolHandler = p;</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-Connector分类"><a href="#2-Connector分类" class="headerlink" title="2.Connector分类"></a>2.Connector分类</h4><p>可以分为以下三类</p><ul><li>Http Connector：解析HTTP请求，又分为BIO Http Connector和NIO Http Connector，即阻塞IO Connector和非阻塞IO Connector。本文主要分析NIO Http Connector的实现过程。</li><li>AJP Connector：基于AJP协议，用于Tomcat与HTTP服务器通信定制的协议，能提供较高的通信速度和效率。如与Apache服务器集成时，采用这个协议。</li><li>APR HTTP Connector：用C实现，通过JNI调用的。主要提升对静态资源（如HTML、图片、CSS、JS等）的访问性能。</li></ul><p>具体要使用哪种Connector可以在server.xml文件中通过protocol属性配置如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"8080"</span> <span class="attr">protocol</span>=<span class="string">"org.apache.coyote.http11.Http11AprProtocol"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">connectionTimeout</span>=<span class="string">"20000"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">redirectPort</span>=<span class="string">"8443"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>每一类Connector对应这一种<code>protocolHandler</code>，<code>protocolHandler</code>用来监听服务器某个端口的请求，但并不处理(处理请求由容器组件完成)。</p><h4 id="3-Conector请求处理流程"><a href="#3-Conector请求处理流程" class="headerlink" title="3.Conector请求处理流程"></a>3.Conector请求处理流程</h4><p><img src="/images/image-20200109163946206.png" alt="image-20200109163946206"></p><h4 id="4-Connector初始化流程"><a href="#4-Connector初始化流程" class="headerlink" title="4.Connector初始化流程"></a>4.Connector初始化流程</h4><p><strong>本文以sprng boot为例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//spring boot启动</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ConfigurableApplicationContext <span class="title">run</span><span class="params">(String... args)</span> </span>&#123;</span><br><span class="line">  ...</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">ApplicationArguments applicationArguments = <span class="keyword">new</span> DefaultApplicationArguments(args);</span><br><span class="line">ConfigurableEnvironment environment = prepareEnvironment(listeners, applicationArguments);</span><br><span class="line">configureIgnoreBeanInfo(environment);</span><br><span class="line">Banner printedBanner = printBanner(environment);</span><br><span class="line">context = createApplicationContext();</span><br><span class="line">exceptionReporters = getSpringFactoriesInstances(SpringBootExceptionReporter<span class="class">.<span class="keyword">class</span>,</span></span><br><span class="line">new Class[] &#123; ConfigurableApplicationContext.class &#125;, context);</span><br><span class="line">prepareContext(context, environment, listeners, applicationArguments, printedBanner);</span><br><span class="line">      refreshContext(context);</span><br><span class="line">      <span class="comment">//spring启动,扫描并且初始化bean；启动了内置web容器</span></span><br><span class="line">afterRefresh(context, applicationArguments);</span><br><span class="line">stopWatch.stop();</span><br><span class="line">  .....</span><br><span class="line">   <span class="keyword">return</span> context;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在ServletWebServerApplicationContext的onRefresh()方会创建servlet容器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onRefresh</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>.onRefresh();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//创建servlet容器</span></span><br><span class="line">createWebServer();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> ApplicationContextException(<span class="string">"Unable to start web server"</span>, ex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在TomcatServletWebServerFactory#getWebServer()中会创建tomcat</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> WebServer <span class="title">getWebServer</span><span class="params">(ServletContextInitializer... initializers)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.disableMBeanRegistry) &#123;</span><br><span class="line">Registry.disableRegistry();</span><br><span class="line">&#125;</span><br><span class="line">   <span class="comment">//创建tomcat</span></span><br><span class="line">Tomcat tomcat = <span class="keyword">new</span> Tomcat();</span><br><span class="line">File baseDir = (<span class="keyword">this</span>.baseDirectory != <span class="keyword">null</span>) ? <span class="keyword">this</span>.baseDirectory : createTempDir(<span class="string">"tomcat"</span>);</span><br><span class="line">tomcat.setBaseDir(baseDir.getAbsolutePath());</span><br><span class="line">   <span class="comment">//创建http nio连接器</span></span><br><span class="line">Connector connector = <span class="keyword">new</span> Connector(<span class="keyword">this</span>.protocol);</span><br><span class="line">connector.setThrowOnFailure(<span class="keyword">true</span>);</span><br><span class="line">   <span class="comment">//创建server和service,并把连接器放到service中</span></span><br><span class="line">tomcat.getService().addConnector(connector);</span><br><span class="line">customizeConnector(connector);</span><br><span class="line">tomcat.setConnector(connector);</span><br><span class="line">tomcat.getHost().setAutoDeploy(<span class="keyword">false</span>);</span><br><span class="line">configureEngine(tomcat.getEngine());</span><br><span class="line"><span class="keyword">for</span> (Connector additionalConnector : <span class="keyword">this</span>.additionalTomcatConnectors) &#123;</span><br><span class="line">tomcat.getService().addConnector(additionalConnector);</span><br><span class="line">&#125;</span><br><span class="line">prepareContext(tomcat.getHost(), initializers);</span><br><span class="line"><span class="keyword">return</span> getTomcatWebServer(tomcat);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在增加的过程中会启动connetot</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addConnector</span><span class="params">(Connector connector)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">synchronized</span> (connectorsLock) &#123;</span><br><span class="line">        connector.setService(<span class="keyword">this</span>);</span><br><span class="line">        Connector results[] = <span class="keyword">new</span> Connector[connectors.length + <span class="number">1</span>];</span><br><span class="line">        System.arraycopy(connectors, <span class="number">0</span>, results, <span class="number">0</span>, connectors.length);</span><br><span class="line">        results[connectors.length] = connector;</span><br><span class="line">        connectors = results;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (getState().isAvailable()) &#123;</span><br><span class="line">          <span class="comment">//启动连接器</span></span><br><span class="line">            connector.start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (LifecycleException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                sm.getString(<span class="string">"standardService.connector.startFailed"</span>, connector), e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Report this property change to interested listeners</span></span><br><span class="line">    support.firePropertyChange(<span class="string">"connector"</span>, <span class="keyword">null</span>, connector);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面以Http11NioProtocol为例分析启动初始化过程：</p><p>在Connector的startInternal()方法中启动了protocolHandler,代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">startInternal</span><span class="params">()</span> <span class="keyword">throws</span> LifecycleException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (getPortWithOffset() &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> LifecycleException(sm.getString(</span><br><span class="line">                <span class="string">"coyoteConnector.invalidPort"</span>, Integer.valueOf(getPortWithOffset())));</span><br><span class="line">    &#125;</span><br><span class="line">    setState(LifecycleState.STARTING);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">//启动protocolHandler</span></span><br><span class="line">        protocolHandler.start();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> LifecycleException(</span><br><span class="line">                sm.getString(<span class="string">"coyoteConnector.protocolHandlerStartFailed"</span>), e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在AbstractProtocol的start()方法中启动endpoint</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (getLog().isInfoEnabled()) &#123;</span><br><span class="line">        getLog().info(sm.getString(<span class="string">"abstractProtocolHandler.start"</span>, getName()));</span><br><span class="line">        logPortOffset();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//启动endpoint</span></span><br><span class="line">    endpoint.start();</span><br><span class="line">    monitorFuture = getUtilityExecutor().scheduleWithFixedDelay(</span><br><span class="line">            <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (!isPaused()) &#123;</span><br><span class="line">                        startAsyncTimeout();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, <span class="number">0</span>, <span class="number">60</span>, TimeUnit.SECONDS);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在NioEndpoint的startInternal()方法，创建creating acceptor, poller threads.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Start the NIO endpoint, creating acceptor, poller threads.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startInternal</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!running) &#123;</span><br><span class="line">        running = <span class="keyword">true</span>;</span><br><span class="line">        paused = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (socketProperties.getProcessorCache() != <span class="number">0</span>) &#123;</span><br><span class="line">            processorCache = <span class="keyword">new</span> SynchronizedStack&lt;&gt;(SynchronizedStack.DEFAULT_SIZE,</span><br><span class="line">                    socketProperties.getProcessorCache());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (socketProperties.getEventCache() != <span class="number">0</span>) &#123;</span><br><span class="line">            eventCache = <span class="keyword">new</span> SynchronizedStack&lt;&gt;(SynchronizedStack.DEFAULT_SIZE,</span><br><span class="line">                    socketProperties.getEventCache());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (socketProperties.getBufferPool() != <span class="number">0</span>) &#123;</span><br><span class="line">            nioChannels = <span class="keyword">new</span> SynchronizedStack&lt;&gt;(SynchronizedStack.DEFAULT_SIZE,</span><br><span class="line">                    socketProperties.getBufferPool());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Create worker collection</span></span><br><span class="line">        <span class="keyword">if</span> (getExecutor() == <span class="keyword">null</span>) &#123;</span><br><span class="line">            createExecutor();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        initializeConnectionLatch();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Start poller thread</span></span><br><span class="line">        poller = <span class="keyword">new</span> Poller();</span><br><span class="line">        Thread pollerThread = <span class="keyword">new</span> Thread(poller, getName() + <span class="string">"-ClientPoller"</span>);</span><br><span class="line">        pollerThread.setPriority(threadPriority);</span><br><span class="line">        pollerThread.setDaemon(<span class="keyword">true</span>);</span><br><span class="line">      <span class="comment">//调用SynchronizedQueue.poll()，直到拿到PollerEvent</span></span><br><span class="line">        pollerThread.start();</span><br><span class="line"><span class="comment">//创建接收器，在AbstractEndpoint#startAcceptorThread()中创建Acceptor，然后启动</span></span><br><span class="line">      <span class="comment">//最终调用NioEndpoint#serverSocketAccept(),启动socketServer</span></span><br><span class="line">      <span class="comment">//开始监听，到这Connector启动就结束了</span></span><br><span class="line">      <span class="comment">//Acceptor接收到请求封装成PollerEvent然后放到SynchronizedQueue中</span></span><br><span class="line">        startAcceptorThread();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-总结"><a href="#5-总结" class="headerlink" title="5.总结"></a>5.总结</h4><ul><li><p><code>Connector</code>负责创建Request和Response</p></li><li><p><code>Connector</code>初始化时会创建对应的Endpoint；Endpoint监听一个指定端口，负责对请求报文的解析和响应报文组装</p></li><li><p><code>Connector</code>初始化时会创建对应的Adapter；Adapter将Request,Response交给给容器处理</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;概要&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;Connector组成&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Connector分类&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Conector请求处理流程&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Connector初始化流程&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="java" scheme="https://www.qiudx.top/categories/java/"/>
    
    
      <category term="java" scheme="https://www.qiudx.top/tags/java/"/>
    
      <category term="tomcat" scheme="https://www.qiudx.top/tags/tomcat/"/>
    
  </entry>
  
  <entry>
    <title>Tomcat简介</title>
    <link href="https://www.qiudx.top/2020/01/03/Tomcat%E7%AE%80%E4%BB%8B/"/>
    <id>https://www.qiudx.top/2020/01/03/Tomcat%E7%AE%80%E4%BB%8B/</id>
    <published>2020-01-03T09:59:40.000Z</published>
    <updated>2020-01-09T08:51:06.401Z</updated>
    
    <content type="html"><![CDATA[<p><strong>概要</strong></p><ul><li>什么是tomcat?</li><li>tomcat作用</li><li>Servlet由来？做什么的？</li><li>Servlet是如何工作的？</li><li>Tomcat的组成</li><li>tomcat组件功能介绍</li></ul><a id="more"></a><h2 id="tomcat介绍"><a href="#tomcat介绍" class="headerlink" title="tomcat介绍"></a>tomcat介绍</h2><h3 id="1-什么是tomcat"><a href="#1-什么是tomcat" class="headerlink" title="1.什么是tomcat?"></a>1.什么是tomcat?</h3><p>Tomcat是Servlet的运行环境,可以称之为容器,Tomcat是运行在JVM上的应用服务器</p><h3 id="2-tomcat作用"><a href="#2-tomcat作用" class="headerlink" title="2.tomcat作用"></a>2.tomcat作用</h3><ol><li>接受请求并解析请求</li><li>处理请求</li><li>返回响应</li></ol><h3 id="3-Servlet由来？做什么的？"><a href="#3-Servlet由来？做什么的？" class="headerlink" title="3.Servlet由来？做什么的？"></a>3.Servlet由来？做什么的？</h3><p>Servlet是SUN为了让Java能实现动态的可交互的网页,从而进入web编程的领域而定义的一套标准.</p><blockquote><p>这套标准是这么说的: 你想用Java开发动态网页, 可以定义一个自己的”Servlet”,但一定要实现HTTPServlet接口,然后重载doGet(),doPost()方法.用户从流浪器GET的时候,调用doGet方法,从流浪器向服务器发送表单数据的时候,调用doPost方法,如果你想访问用户从浏览器传递过来的参数,用HttpServletRequest对象就好了,里面有getParameter,getQueryString方法,如果你处理完了,想向浏览器返回数据,用HttpServletResponse对象调用getPrintWriter方法就可以输出数据了.</p><p>如果你想实现一个购物车,需要session,很简单,从HttpServletRequest调用getSession方法就可以了.</p></blockquote><h3 id="4-Servlet是如何工作的？"><a href="#4-Servlet是如何工作的？" class="headerlink" title="4.Servlet是如何工作的？"></a>4.Servlet是如何工作的？</h3><ol><li>由servlet容器创建一个实现ServletRequest或HttpServletRequest的实例,该request中包含请求类型,URL,协议,参数,Cookies等</li><li>由servlet容器创建一个实现ServletReponse或HttpServletReponse的实例,用来向Web客户端发送响应。</li><li>调用Servlet的service方法,将request对象和response对象作为参数传入。Servlet从request对象中读取信息,并通过response对象发送响应信息.</li></ol><h3 id="5-Tomcat的组成"><a href="#5-Tomcat的组成" class="headerlink" title="5.Tomcat的组成"></a>5.Tomcat的组成</h3><ol><li><p>Server(服务器)和Service(服务)</p></li><li><p>Connector(连接器)</p><ul><li>HTTP<ul><li>Nio</li></ul></li><li>Apr</li><li>AJP(apache私有协议,用于tomcat和apache静态服务器通信)</li></ul></li><li><p>Container(容器)</p><ul><li>Engine</li><li>Host</li><li>Context</li><li>Wrapper</li></ul></li><li><p>Component(组件)</p><ul><li>Manager（管理器）</li><li>logger（日志管理）</li><li>loader（载入器）</li><li>pipeline(管道)</li><li>valve（管道中的阀）</li></ul></li></ol><p><img src="/images/image-20200108141046197.png" alt="image-20200108141046197"></p><h2 id="tomca组件功能"><a href="#tomca组件功能" class="headerlink" title="tomca组件功能"></a>tomca组件功能</h2><h3 id="1-Server"><a href="#1-Server" class="headerlink" title="1.Server"></a>1.Server</h3><p>Server为定义的接口,默认实现是StandardServer,主要作用有</p><ul><li>定义了 Servlet 容器的相关配置,即<code>server.xml</code>中的配置</li><li>启动<code>Server</code>将启动所有的Tomcat组件,关闭<code>Server</code>将关闭所有组件</li></ul><p>Server接口中重要的方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Server</span> <span class="keyword">extends</span> <span class="title">Lifecycle</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPort</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPort</span><span class="params">(<span class="keyword">int</span> port)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAddress</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(String address)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getShutdown</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setShutdown</span><span class="params">(String shutdown)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addService</span><span class="params">(Service service)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Service <span class="title">findService</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Service[] findServices();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeService</span><span class="params">(Service service)</span></span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-Service"><a href="#2-Service" class="headerlink" title="2.Service"></a>2.Service</h3><p>Service为定义的接口,默认实现是StandardService,主要作用有</p><ul><li>逻辑上包含Connector和Container</li></ul><p>Service接口中重要的方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Service</span> <span class="keyword">extends</span> <span class="title">Lifecycle</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Engine <span class="title">getContainer</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContainer</span><span class="params">(Engine engine)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Server <span class="title">getServer</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setServer</span><span class="params">(Server server)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addConnector</span><span class="params">(Connector connector)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Connector[] findConnectors();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeConnector</span><span class="params">(Connector connector)</span></span>;</span><br><span class="line">  </span><br><span class="line">    <span class="function">Mapper <span class="title">getMapper</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-Connector"><a href="#3-Connector" class="headerlink" title="3.Connector"></a>3.Connector</h3><p>Connector为定义的连接器类,默认实现的协议有http、https、AJP,主要作用有</p><ul><li>根据不同的协议解析客户端的请求</li><li>将解析完的请求转发给Connector关联的Engine容器处理</li></ul><p>Connector默认支持的协议如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Defaults to using HTTP/1.1 NIO implementation.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Connector</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(<span class="string">"org.apache.coyote.http11.Http11NioProtocol"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Connector</span><span class="params">(String protocol)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> aprConnector = AprLifecycleListener.isAprAvailable() &amp;&amp;</span><br><span class="line">            AprLifecycleListener.getUseAprConnector();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="string">"HTTP/1.1"</span>.equals(protocol) || protocol == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (aprConnector) &#123;</span><br><span class="line">            protocolHandlerClassName = <span class="string">"org.apache.coyote.http11.Http11AprProtocol"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            protocolHandlerClassName = <span class="string">"org.apache.coyote.http11.Http11NioProtocol"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"AJP/1.3"</span>.equals(protocol)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (aprConnector) &#123;</span><br><span class="line">            protocolHandlerClassName = <span class="string">"org.apache.coyote.ajp.AjpAprProtocol"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            protocolHandlerClassName = <span class="string">"org.apache.coyote.ajp.AjpNioProtocol"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        protocolHandlerClassName = protocol;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Instantiate protocol handler</span></span><br><span class="line">    ProtocolHandler p = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Class&lt;?&gt; clazz = Class.forName(protocolHandlerClassName);</span><br><span class="line">        p = (ProtocolHandler) clazz.getConstructor().newInstance();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        log.error(sm.getString(</span><br><span class="line">                <span class="string">"coyoteConnector.protocolHandlerInstantiationFailed"</span>), e);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.protocolHandler = p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-Engine"><a href="#4-Engine" class="headerlink" title="4.Engine"></a>4.Engine</h3><img src="/images/image-20200107175614257.png" alt="image-20200107175614257" style="zoom:50%"><p>Engine为定义的接口,默认实现是StandardEngine,主要有以下模块：</p><ul><li>Cluster：实现tomcat管理</li><li>Realm：实现用户权限管理模块</li><li>Pipeline和Valve：处理Pipeline上的各个Valve,是一种责任链模式。只是简单的将Connector传过来的变量传给Host容器</li></ul><h3 id="5-Host"><a href="#5-Host" class="headerlink" title="5.Host"></a>5.Host</h3><img src="/images/image-20200107175652268.png" alt="image-20200107175652268" style="zoom:50%"><p>Host为定义的接口,默认实现是StandardHost,主要有以下模块：</p><ul><li>Cluster：实现tomcat管理</li><li>Realm：实现用户权限管理模块</li><li>Pipeline和Valve：处理Pipeline上的各个Valve,是一种责任链模式</li></ul><h3 id="6-Context"><a href="#6-Context" class="headerlink" title="6.Context"></a>6.Context</h3><img src="/images/image-20200107175858093.png" alt="image-20200107175858093" style="zoom:50%"><p>Context为定义的接口,默认实现是StandardContext,主要有以下模块：</p><ul><li>Realm：实现用户权限管理模块</li><li>Pipeline和Valve：处理Pipeline上的各个Valve,是一种责任链模式</li><li>Manager: 它主要是应用的session管理模块</li><li>Resources: 它是每个web app对应的部署结构的封装</li><li>Loader：它是对每个web app的自有的classloader的封装</li><li>Mapper：它封装了请求资源URI与每个相对应的处理wrapper容器的映射关系</li></ul><h3 id="7-Wrapper"><a href="#7-Wrapper" class="headerlink" title="7.Wrapper"></a>7.Wrapper</h3><img src="/images/image-20200107180004981.png" alt="image-20200107180004981" style="zoom:50%"><p>Wrapper为定义的接口,默认实现是StandardWrapper,主要有以下模块：</p><ul><li>Pipeline和Valve：处理Pipeline上的各个Valve,是一种责任链模式</li><li>Servlet和Servlet Stack：保存Wrapper包装的Servlet</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;概要&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;什么是tomcat?&lt;/li&gt;&lt;li&gt;tomcat作用&lt;/li&gt;&lt;li&gt;Servlet由来？做什么的？&lt;/li&gt;&lt;li&gt;Servlet是如何工作的？&lt;/li&gt;&lt;li&gt;Tomcat的组成&lt;/li&gt;&lt;li&gt;tomcat组件功能介绍&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="java" scheme="https://www.qiudx.top/categories/java/"/>
    
    
      <category term="java" scheme="https://www.qiudx.top/tags/java/"/>
    
      <category term="tomcat" scheme="https://www.qiudx.top/tags/tomcat/"/>
    
  </entry>
  
  <entry>
    <title>中国爬虫违法违规案例汇总</title>
    <link href="https://www.qiudx.top/2020/01/02/%E4%B8%AD%E5%9B%BD%E7%88%AC%E8%99%AB%E8%BF%9D%E6%B3%95%E8%BF%9D%E8%A7%84%E6%A1%88%E4%BE%8B%E6%B1%87%E6%80%BB/"/>
    <id>https://www.qiudx.top/2020/01/02/%E4%B8%AD%E5%9B%BD%E7%88%AC%E8%99%AB%E8%BF%9D%E6%B3%95%E8%BF%9D%E8%A7%84%E6%A1%88%E4%BE%8B%E6%B1%87%E6%80%BB/</id>
    <published>2020-01-02T10:58:24.000Z</published>
    <updated>2020-01-08T02:28:52.156Z</updated>
    
    <content type="html"><![CDATA[<p>最近在 GitHub 发现了一个仓库，这个库整理了<strong>所有中国大陆爬虫开发者涉诉与违规相关的新闻、资料与法律法规</strong> 。</p><p>GitHub 地址：</p><p><a href="https://github.com/HiddenStrawberry/Crawler_Illegal_Cases_In_China" target="_blank" rel="noopener">https://github.com/HiddenStrawberry/Crawler_Illegal_Cases_In_China</a></p><a id="more"></a><p>本项目用来整理所有中国大陆爬虫开发者涉诉与违规相关的新闻、资料与法律法规。致力于帮助在中国大陆工作的爬虫行业从业者了解我国相关法律，避免触碰数据合规红线。</p><h1 id="违法违规案例汇总"><a href="#违法违规案例汇总" class="headerlink" title="违法违规案例汇总"></a>违法违规案例汇总</h1><h2 id="爬虫禁区1：为违法违规组织提供爬虫相关服务（验证码识别服务贩卖、SEO……）"><a href="#爬虫禁区1：为违法违规组织提供爬虫相关服务（验证码识别服务贩卖、SEO……）" class="headerlink" title="爬虫禁区1：为违法违规组织提供爬虫相关服务（验证码识别服务贩卖、SEO……）"></a>爬虫禁区1：为违法违规组织提供爬虫相关服务（验证码识别服务贩卖、SEO……）</h2><ul><li><a href="https://github.com/HiddenStrawberry/Crawler_Illegal_Cases_In_China/tree/master/case1" target="_blank" rel="noopener">CASE1:知乎某极验破解者自述被抓（已删除）</a></li><li><a href="https://github.com/HiddenStrawberry/Crawler_Illegal_Cases_In_China/tree/master/case2" target="_blank" rel="noopener">CASE2:“快啊答题”AI破解验证码服务开发者被判刑</a></li><li><a href="https://baijiahao.baidu.com/s?id=1589886315683543136&wfr=spider&for=pc" target="_blank" rel="noopener">CASE9:永嘉警方揪出“黑”百度黑客团伙 干扰搜索引擎牟利超七千万元</a></li></ul><h2 id="爬虫禁区2：个人隐私数据抓取与贩卖"><a href="#爬虫禁区2：个人隐私数据抓取与贩卖" class="headerlink" title="爬虫禁区2：个人隐私数据抓取与贩卖"></a>爬虫禁区2：个人隐私数据抓取与贩卖</h2><ul><li><a href="https://github.com/HiddenStrawberry/Crawler_Illegal_Cases_In_China/tree/master/case3" target="_blank" rel="noopener">CASE3:简历大数据公司“巧达科技”被一锅端</a></li><li><a href="http://www.aihami.com/a/dangjian/shibada/403060.html" target="_blank" rel="noopener">CASE4:社保掌上通被下架 用户的信息很容易泄露太不安全了</a></li><li><a href="http://baijiahao.baidu.com/s?id=1645632518831659246&wfr=spider&for=pc" target="_blank" rel="noopener">CASE5:爬虫为何受关注？业内：大数据服务商或因合作方涉套路贷犯罪而被牵连</a></li></ul><h2 id="爬虫禁区3：利用无版权的商业数据获利"><a href="#爬虫禁区3：利用无版权的商业数据获利" class="headerlink" title="爬虫禁区3：利用无版权的商业数据获利"></a>爬虫禁区3：利用无版权的商业数据获利</h2><ul><li><a href="https://github.com/HiddenStrawberry/Crawler_Illegal_Cases_In_China/tree/master/case6" target="_blank" rel="noopener">CASE6:“车来了”涉嫌偷数据被警方立案</a></li><li><a href="https://money.163.com/19/0802/06/ELI9OADD002580S6.html" target="_blank" rel="noopener">CASE8:裁判文书网数据竟被售卖：爬虫程序抓取 或成侵权</a></li></ul><h2 id="爬虫禁区4：？"><a href="#爬虫禁区4：？" class="headerlink" title="爬虫禁区4：？"></a>爬虫禁区4：？</h2><ul><li><a href="https://github.com/HiddenStrawberry/Crawler_Illegal_Cases_In_China/tree/master/case7" target="_blank" rel="noopener">CASE7:头疼大战前传：头条前高管反噬被判刑</a></li></ul><h1 id="相关法律法规介绍"><a href="#相关法律法规介绍" class="headerlink" title="相关法律法规介绍"></a>相关法律法规介绍</h1><h2 id="非法获取计算机系统数据罪"><a href="#非法获取计算机系统数据罪" class="headerlink" title="非法获取计算机系统数据罪"></a>非法获取计算机系统数据罪</h2><blockquote><p>根据《中华人民共和国刑法》第二百八十五条规定，非法获取计算机信息系统数据、非法控制计算机信息系统罪，是指违反国家规定，<strong>侵入国家事务、国防建设、尖端科学技术领域以外的计算机信息系统或者采用其他技术手段，获取该计算机信息系统中存储、处理或者传输的数据</strong>，情节严重的行为。刑法第285条第2款明确规定，犯本罪的，<strong>处三年以下有期徒刑或者拘役，并处或者单处罚金；情节特别严重的，处三年以上七年以下有期徒刑，并处罚金。</strong></p></blockquote><h2 id="非法侵入计算机信息系统罪"><a href="#非法侵入计算机信息系统罪" class="headerlink" title="非法侵入计算机信息系统罪"></a>非法侵入计算机信息系统罪</h2><blockquote><p>《刑法》第二百八十六条还规定，违反国家规定，对计算机信息系统功能进行删除、修改、增加、干扰，造成计算机信息系统不能正常运行，后果严重的，构成犯罪，处五年以下有期徒刑或者拘役；后果特别严重的，处五年以上有期徒刑。而违反国家规定，对计算机信息系统中存储、处理或者传输的数据和应用程序进行删除、修改、增加的操作，后果严重的，也构成犯罪，依照前款的规定处罚。</p></blockquote><h2 id="侵犯公民个人信息罪"><a href="#侵犯公民个人信息罪" class="headerlink" title="侵犯公民个人信息罪"></a>侵犯公民个人信息罪</h2><blockquote><p>《刑法》修正案（九）中将刑法第二百五十三条进行了修订，明确规定违反国家有关规定，向他人出售或者提供公民个人信息，情节严重的，构成犯罪；在未经用户许可的情况下，非法获取用户的个人信息，情节严重的也将构成“侵犯公民个人信息罪”。 根据《最高人民法院 最高人民检察院关于办理侵犯公民个人信息刑事案件适用法律若干问题的解释》第五条规定，对“情节严重”的解释，（1）非法获取、出售或者提供行踪轨迹信息、通信内容、征信信息、财产信息五十条以上的；（2）非法获取、出售或者提供住宿信息、通信记录、健康生理信息、交易信息等其他可能影响人身、财产安全的公民个人信息五百条以上的；（3）非法获取、出售或者提供第三项、第四项规定以外的公民个人信息五千条以上的便构成“侵犯公民个人信息罪”所要求的“情节严重”。</p></blockquote><h2 id="侵犯商业秘密罪"><a href="#侵犯商业秘密罪" class="headerlink" title="侵犯商业秘密罪"></a>侵犯商业秘密罪</h2><blockquote><p>《反不正当竞争法》第九条，以不正当手段获取他人商业秘密的行为即已经构成侵犯商业秘密。而后续如果进一步利用，或者公开该等信息，则构成对他人商业秘密的披露和使用，同样构成对权利人的商业秘密的侵犯。</p></blockquote><h2 id="网络安全法"><a href="#网络安全法" class="headerlink" title="网络安全法"></a>网络安全法</h2><blockquote><p>《网络安全法》第四十四条 任何个人和组织不得窃取或者以其他非法方式获取个人信息。因此，如果爬虫在未经用户同意的情况下大量抓取用户的个人信息，则有可能构成非法收集个人信息的违法行为。</p></blockquote><h2 id="民法总则"><a href="#民法总则" class="headerlink" title="民法总则"></a>民法总则</h2><blockquote><p>《民法总则》第111条任何组织和个人需要获取他人个人信息的，应当依法取得并确保信息安全。不得非法收集、使用、加工、传输他人个人信息</p></blockquote><h1 id="专业律师发表的相关观点"><a href="#专业律师发表的相关观点" class="headerlink" title="专业律师发表的相关观点"></a>专业律师发表的相关观点</h1><p><a href="http://www.cicjc.com.cn/zh/node/9449" target="_blank" rel="noopener">周 浩：利用网络爬虫获取数据的刑事责任分析</a></p><p><a href="https://www.kwm.com/zh/cn/knowledge/insights/legal-issues-concerning-web-crawlers-20180525" target="_blank" rel="noopener">金 杜：数据之争：网络爬虫涉及的法律问题</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在 GitHub 发现了一个仓库，这个库整理了&lt;strong&gt;所有中国大陆爬虫开发者涉诉与违规相关的新闻、资料与法律法规&lt;/strong&gt; 。&lt;/p&gt;&lt;p&gt;GitHub 地址：&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/HiddenStrawberry/Crawler_Illegal_Cases_In_China&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/HiddenStrawberry/Crawler_Illegal_Cases_In_China&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="爬虫" scheme="https://www.qiudx.top/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="https://www.qiudx.top/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>如何搭个博客网站</title>
    <link href="https://www.qiudx.top/2019/12/31/%E5%A6%82%E4%BD%95%E6%90%AD%E4%B8%AA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/"/>
    <id>https://www.qiudx.top/2019/12/31/%E5%A6%82%E4%BD%95%E6%90%AD%E4%B8%AA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/</id>
    <published>2019-12-31T14:53:20.000Z</published>
    <updated>2020-01-07T10:37:23.650Z</updated>
    
    <content type="html"><![CDATA[<p><strong>概要</strong></p><ul><li><p>Hexo</p></li><li><p>编写博客</p></li><li><p>github</p></li><li><p>域名</p></li></ul><a id="more"></a><h2 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h2><h3 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1.介绍"></a>1.介绍</h3><p>主页： <a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">https://hexo.io/zh-cn/</a><br>主页中有非常详细的介绍</p><ul><li>hexo 可以理解为是基于node.js制作的一个博客工具，不是我们理解的一个开源的博客系统。</li><li>hexo 正常来说，不需要部署到我们的服务器上，我们的服务器上保存的，其实是基于在hexo通过markdown编写的文章，然后hexo帮我们生成静态的html页面，然后，将生成的html上传到我们的服务器。简而言之：hexo是个静态页面生成、上传的工具。</li></ul><h3 id="2-安装"><a href="#2-安装" class="headerlink" title="2.安装"></a>2.安装</h3><p><code>hexo</code>依赖<code>node</code>环境，安装hexo前请先安装Nodejs</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br><span class="line">hexo init blog</span><br><span class="line">cd blog</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>以后可能会用到的插件</p><ol><li><p>压缩HTML, JS, CSS, SVG, XML and JSON</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> npm install hexo-yam --save</span></span><br></pre></td></tr></table></figure><p>然后在（hexo/_config.yml）中添加：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">minify:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">html:</span></span><br><span class="line">  <span class="attr">css:</span></span><br><span class="line">  <span class="attr">js:</span></span><br><span class="line">  <span class="attr">svg:</span></span><br><span class="line">  <span class="attr">gzip:</span></span><br><span class="line">  <span class="attr">brotli:</span></span><br></pre></td></tr></table></figure></li><li><p>百度网站地图插件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-baidu-sitemap --save-dev</span><br></pre></td></tr></table></figure></li><li><p>搜索插件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-json-content@2.2.0 --save</span><br></pre></td></tr></table></figure></li></ol><h2 id="博客"><a href="#博客" class="headerlink" title="博客"></a>博客</h2><h3 id="1-创建新blog"><a href="#1-创建新blog" class="headerlink" title="1.创建新blog"></a>1.创建新blog</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new xxx</span><br></pre></td></tr></table></figure><h3 id="2-启动"><a href="#2-启动" class="headerlink" title="2.启动"></a>2.启动</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><h3 id="3-修改主题"><a href="#3-修改主题" class="headerlink" title="3.修改主题"></a>3.修改主题</h3><p>默认的主题有些丑，可以在<a href="https://hexo.io/themes/" target="_blank" rel="noopener">https://hexo.io/themes/</a> 这个网站挑选自己喜欢的主题</p><h2 id="github"><a href="#github" class="headerlink" title="github"></a>github</h2><p>博客写好了之后，我们用利用GitHub来托管静态网站</p><h3 id="1-账号注册"><a href="#1-账号注册" class="headerlink" title="1.账号注册"></a>1.账号注册</h3><p>先去<a href="https://github.com/" target="_blank" rel="noopener">github官网</a>上注册一个账号，根据提示最后一步别忘了激活你的邮箱</p><h3 id="2-创建仓库"><a href="#2-创建仓库" class="headerlink" title="2.创建仓库"></a>2.创建仓库</h3><p>注册完后选择start a project创建一个公开的仓库</p><p>注意：项目名字固定且唯一，username.github.io</p><p>例如我的是<code>qiudxx.github.io</code>然后点击生成</p><h3 id="3-发布"><a href="#3-发布" class="headerlink" title="3.发布"></a>3.发布</h3><p>先安装git插件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>修改_config.yml文件:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  - type: git</span><br><span class="line">    repository: git@github.com:qiudxx/qiudxx.github.io.git,master</span><br><span class="line">    branch: master</span><br></pre></td></tr></table></figure><p>你要确保你本地能git push到服务端，需要配置本地的ssh github私钥。没有操作过的同学，请自行搜索。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g -d</span><br></pre></td></tr></table></figure><p>这样应该就能在你的github上看到上传的代码了，这时看到的应该是纯静态的一个站点。</p><p>这时可以访问<a href="https://username.github.io" target="_blank" rel="noopener">https://username.github.io</a> 看到博客内容</p><p>例如我的地址是：<a href="https://qiudxx.github.io" target="_blank" rel="noopener">https://qiudxx.github.io</a></p><p>我配置了域名，会自动跳转到我的域名</p><h2 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h2><p>阿里云,百度云,腾讯云等云服务商会提供一些非常实惠的域名；</p><p>1元就能买到很多不错的域名。</p><ol><li><p>进入github刚创建的项目，点击Setting</p></li><li><p>在GitHub Pages设置中Custom domain设置为你的域名</p><p><img src="/images/image-20191231224532249.png" alt="image-20191231224532249"></p></li><li><p>进入域名服务设置</p><p>增加两条记录</p><ul><li>记录类型为cname</li><li>记录值为你博客的访问地址</li></ul><img src="/images/image-20191231224836226.png" alt="image-20191231224836226" style="zoom:150%"></li><li><p>开启https</p><p><img src="/images/image-20191231225209179.png" alt="image-20191231225209179"></p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;概要&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;Hexo&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;编写博客&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;github&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;域名&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="blog" scheme="https://www.qiudx.top/categories/blog/"/>
    
    
      <category term="blog" scheme="https://www.qiudx.top/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>Restful</title>
    <link href="https://www.qiudx.top/2019/12/29/Restful/"/>
    <id>https://www.qiudx.top/2019/12/29/Restful/</id>
    <published>2019-12-28T16:05:42.000Z</published>
    <updated>2020-01-07T10:54:08.594Z</updated>
    
    <content type="html"><![CDATA[<p><strong>概要</strong></p><ul><li>什么是Restful</li><li>原则条件</li><li>Restful应用特点</li></ul><a id="more"></a><h3 id="1-什么是Restful"><a href="#1-什么是Restful" class="headerlink" title="1.什么是Restful"></a>1.什么是Restful</h3><p>​ 一种软件架构风格，设计风格而不是标准，只是提供了一组设计原则和约束条件。它主要用于客户端和服务器交互类的软件。基于这个风格设计的软件可以更简洁，更有层次，更易于实现缓存等机制。</p><p>​ REST（英文：<strong>Representational State Transfer</strong>，简称REST）描述了一个架构样式的网络系统，比如 web 应用程序。它首次出现在 2000 年 Roy Fielding 的博士论文中，他是 HTTP 规范的主要编写者之一。在目前主流的三种Web服务交互方案中，REST相比于SOAP（Simple Object Access protocol，简单对象访问协议）以及XML-RPC更加简单明了，无论是对URL的处理还是对Payload的编码，REST都倾向于用更加简单轻量的方法设计和实现。值得注意的是REST并没有一个明确的标准，而更像是一种设计的风格。</p><h3 id="2-原则条件"><a href="#2-原则条件" class="headerlink" title="2.原则条件"></a>2.原则条件</h3><p>REST 指的是一组架构约束条件和原则。满足这些约束条件和原则的应用程序或设计就是 RESTful。</p><p>Web 应用程序最重要的 REST 原则是，客户端和服务器之间的交互在请求之间是无状态的。从客户端到服务器的每个请求都必须包含理解请求所必需的信息。如果服务器在请求之间的任何时间点重启，客户端不会得到通知。此外，无状态请求可以由任何可用服务器回答，这十分适合云计算之类的环境。客户端可以缓存数据以改进性能。</p><p>在服务器端，应用程序状态和功能可以分为各种资源。资源是一个有趣的概念实体，它向客户端公开。资源的例子有：应用程序对象、数据库记录、算法等等。每个资源都使用 URI (Universal Resource Identifier) 得到一个唯一的地址。所有资源都共享统一的接口，以便在客户端和服务器之间传输状态。使用的是标准的 HTTP 方法，比如 GET、PUT、POST 和DELETE。Hypermedia 是应用程序状态的引擎，资源表示通过超链接互联。</p><h3 id="3-Restful应用特点"><a href="#3-Restful应用特点" class="headerlink" title="3.Restful应用特点"></a>3.Restful应用特点</h3><ul><li>从资源的角度来考察整个网络，每个资源有唯一标识</li><li>使用通用的连接器接口操作资源</li><li>对资源的操作不会改变资源标识</li><li>连接协议具有无状态性</li><li>能够使用 Cache 机制来增进性能</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;概要&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;什么是Restful&lt;/li&gt;&lt;li&gt;原则条件&lt;/li&gt;&lt;li&gt;Restful应用特点&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
    
      <category term="面试" scheme="https://www.qiudx.top/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Token</title>
    <link href="https://www.qiudx.top/2018/07/01/Token/"/>
    <id>https://www.qiudx.top/2018/07/01/Token/</id>
    <published>2018-07-01T14:56:35.000Z</published>
    <updated>2020-01-03T16:49:55.887Z</updated>
    
    <content type="html"><![CDATA[<p><strong>概要</strong></p><ul><li><p>Token是干什么</p></li><li><p>Token是怎么做的？</p></li><li><p>Token长什么样子呢？</p></li><li><p>Token怎么使用呢？</p></li></ul><a id="more"></a><h4 id="Token是干什么"><a href="#Token是干什么" class="headerlink" title="Token是干什么"></a>Token是干什么</h4><ul><li>简称 JWT，在HTTP通信过程中，进行身份认证。</li></ul><h4 id="Token是怎么做的？"><a href="#Token是怎么做的？" class="headerlink" title="Token是怎么做的？"></a>Token是怎么做的？</h4><ol><li>客户端通过用户名和密码登录服务器；</li><li>服务端对客户端身份进行验证；</li><li>服务端对该用户生成Token，返回给客户端；</li><li>客户端将Token保存到本地浏览器</li><li>客户端发起请求，需要携带该Token；</li><li>服务端收到请求后，首先验证Token，之后返回数据。</li></ol><p>注意： <strong>服务端不需要保存Token，只需要对Token中携带的信息进行验证即可；无论客户端访问后台的那台服务器，只要可以通过用户信息的验证即可。</strong></p><h4 id="Token长什么样子呢？"><a href="#Token长什么样子呢？" class="headerlink" title="Token长什么样子呢？"></a>Token长什么样子呢？</h4><ul><li><p>通过名字就可以看出来，是一个 json。</p></li><li><p>由三部分内容组成：</p></li></ul><ul><li>头(header)，一般很少改动直接使用默认的即可：</li></ul><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">     &#39;typ&#39;:&#39;JWT&#39;,</span><br><span class="line">     &#39;alg&#39;:&#39;HS256&#39;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><ul><li><p>肚子(playload),东西都装在肚子里，默认的内容有：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">     &#39;iss&#39;:&#39;签发者&#39;,</span><br><span class="line">     &#39;sub&#39;:&#39;面向的用户&#39;,</span><br><span class="line">     &#39;aud&#39;:&#39;接收方&#39;,</span><br><span class="line">     &#39;exp&#39;:  过期时间,</span><br><span class="line">     &#39;iat&#39;:  创建时间,</span><br><span class="line">     &#39;nbf&#39;:  在什么时间之前，该Token不可用,</span><br><span class="line">     &#39;jti&#39;:&#39;Token唯一标识&#39;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据需要用户可以自己定义，Token 中传输的内容，一般会将用户名，角色等信息放到 Token 中。</p></li></ul><ul><li><p>尾(signature),前面两部分转为字符串后，使用 base64 编码，然后进行加密得到一个字符串。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Token &#x3D; 头（base64）+ 肚子（base64）+ 尾；</span><br></pre></td></tr></table></figure></li></ul><h4 id="Token怎么使用呢？"><a href="#Token怎么使用呢？" class="headerlink" title="Token怎么使用呢？"></a>Token怎么使用呢？</h4><p>利用Java封装的JJWT实现，下载jar地址为：<a href="http://maven.outofmemory.cn/io.jsonwebtoken/jjwt/0.6.0/" target="_blank" rel="noopener">http://maven.outofmemory.cn/io.jsonwebtoken/jjwt/0.6.0/</a></p><p>还需要依赖包 jackson-annotations-2.5.0.jar、jackson-core-2.5.0.jar、jackson-databind-2.5.0.jar，地址：<a href="http://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-core/2.5.0" target="_blank" rel="noopener">http://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-core/2.5.0</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.security.Key;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.crypto.spec.SecretKeySpec;</span><br><span class="line"><span class="keyword">import</span> javax.xml.bind.DatatypeConverter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.Claims;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.ExpiredJwtException;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.InvalidClaimException;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.JwtBuilder;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.Jwts;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.SignatureAlgorithm;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtManager</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1、选择签名的算法</span></span><br><span class="line"><span class="comment"> * 2、生成签名的密钥</span></span><br><span class="line"><span class="comment"> * 3、构建Token信息</span></span><br><span class="line"><span class="comment"> * 4、利用算法和密钥生成Token</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">createToken</span><span class="params">()</span> </span>&#123;</span><br><span class="line">SignatureAlgorithm signatureAlgorithm = SignatureAlgorithm.HS256;</span><br><span class="line"></span><br><span class="line"><span class="keyword">byte</span>[] secretBytes = DatatypeConverter.parseBase64Binary(<span class="string">"JWT-TOKEN"</span>);</span><br><span class="line">Key signingKey = <span class="keyword">new</span> SecretKeySpec(secretBytes, signatureAlgorithm.getJcaName());</span><br><span class="line">Map&lt;String, Object&gt; claims = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">claims.put(<span class="string">"username"</span>, <span class="string">"token"</span>);</span><br><span class="line">claims.put(<span class="string">"role"</span>, <span class="string">"admin"</span>);</span><br><span class="line">JwtBuilder builder = Jwts.builder().setClaims(claims)</span><br><span class="line">.setId(<span class="string">"tokenid"</span>)</span><br><span class="line">.setIssuedAt(<span class="keyword">new</span> Date())</span><br><span class="line">.setExpiration(<span class="keyword">new</span> Date(System.currentTimeMillis()+<span class="number">10</span>*<span class="number">60</span>*<span class="number">1000</span>))</span><br><span class="line">.signWith(signatureAlgorithm, signingKey);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> builder.compact();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Claims <span class="title">parseToken</span><span class="params">(String token)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> Jwts.parser().setSigningKey(DatatypeConverter.parseBase64Binary(<span class="string">"JWT-TOKEN"</span>))</span><br><span class="line">.parseClaimsJws(token).getBody();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">validateToken</span><span class="params">(String token)</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">Claims claims = parseToken(token);</span><br><span class="line">String username = claims.get(<span class="string">"username"</span>).toString();</span><br><span class="line">String role = claims.get(<span class="string">"role"</span>).toString();</span><br><span class="line">String tokenid = claims.getId();</span><br><span class="line">System.out.println(<span class="string">"[username]:"</span>+username);</span><br><span class="line">System.out.println(<span class="string">"[role]:"</span>+role);</span><br><span class="line">System.out.println(<span class="string">"[tokenid]:"</span>+tokenid);</span><br><span class="line">&#125; <span class="keyword">catch</span>(ExpiredJwtException e) &#123;</span><br><span class="line">System.out.println(<span class="string">"token expired"</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InvalidClaimException e) &#123;</span><br><span class="line">System.out.println(<span class="string">"token invalid"</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">System.out.println(<span class="string">"token error"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">validateToken(createToken());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;概要&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;Token是干什么&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Token是怎么做的？&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Token长什么样子呢？&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Token怎么使用呢？&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="java" scheme="https://www.qiudx.top/categories/java/"/>
    
    
      <category term="java" scheme="https://www.qiudx.top/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>elasticsearch学习</title>
    <link href="https://www.qiudx.top/2018/06/13/elasticsearch%E5%AD%A6%E4%B9%A0/"/>
    <id>https://www.qiudx.top/2018/06/13/elasticsearch%E5%AD%A6%E4%B9%A0/</id>
    <published>2018-06-13T10:57:53.000Z</published>
    <updated>2020-01-07T10:51:01.545Z</updated>
    
    <content type="html"><![CDATA[<p><strong>概要</strong></p><ul><li><p>是什么</p></li><li><p>名词解释</p></li><li><p>elasticsearch简单使用</p></li></ul><a id="more"></a><h3 id="elasticsearch学习"><a href="#elasticsearch学习" class="headerlink" title="elasticsearch学习"></a>elasticsearch学习</h3><h4 id="1-是什么"><a href="#1-是什么" class="headerlink" title="1.是什么"></a>1.是什么</h4><ul><li>分布式的实时文件存储，每个字段都被索引并可被搜索</li><li>分布式的实时分析搜索引擎</li><li>可以扩展到上百台服务器，处理PB级结构化或非结构化数据</li></ul><h4 id="2-名词解释"><a href="#2-名词解释" class="headerlink" title="2.名词解释"></a>2.名词解释</h4><ul><li><p>index</p><p>类似于MySQL的数据库</p></li><li><p>type</p><p>类似于MySQL的表</p></li><li><p>document</p><p>类似于MySQL的行</p></li></ul><h4 id="3-简单入门"><a href="#3-简单入门" class="headerlink" title="3.简单入门"></a>3.简单入门</h4><ol><li><p>依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hutool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hutool-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch.client<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>transport<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>配置文件</p><ol><li><p>application.properties</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># Elasticsearch</span><br><span class="line"># 9200端口是用来让HTTP REST API来访问ElasticSearch，而9300端口是传输层监听的默认端口</span><br><span class="line">elasticsearch.ip&#x3D;127.0.0.1</span><br><span class="line">elasticsearch.port&#x3D;9300</span><br><span class="line"># 默认值是核心线程数*4</span><br><span class="line">elasticsearch.pool&#x3D;5</span><br><span class="line">elasticsearch.cluster.name&#x3D;qiudx_es_study</span><br></pre></td></tr></table></figure></li><li><p>es配置文件ElasticsearchConfig</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用于定义配置类，可替换xml配置文件</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> qiudx</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> $Id ElasticsearchConfig.java, v 0.1 2018-06-13 13:26 qiudx Exp $$</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ElasticsearchConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(ElasticsearchConfig<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * elk集群地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;elasticsearch.ip&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String hostName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 端口</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;elasticsearch.port&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String port;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 集群名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;elasticsearch.cluster.name&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String clusterName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 连接池</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;elasticsearch.pool&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String poolSize;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Bean name default  函数名字</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"transportClient"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TransportClient <span class="title">transportClient</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        LOGGER.info(<span class="string">"Elasticsearch初始化开始。。。。。"</span>);</span><br><span class="line">        TransportClient transportClient = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 配置信息</span></span><br><span class="line">            Settings esSetting = Settings.builder()</span><br><span class="line">                    <span class="comment">//集群名字</span></span><br><span class="line">                    .put(<span class="string">"cluster.name"</span>, clusterName)</span><br><span class="line">                    <span class="comment">//增加嗅探机制，找到ES集群</span></span><br><span class="line">                    .put(<span class="string">"client.transport.sniff"</span>, <span class="keyword">true</span>)</span><br><span class="line">                    <span class="comment">//增加线程池个数，暂时设为5</span></span><br><span class="line">                    .put(<span class="string">"thread_pool.search.size"</span>, Integer.parseInt(poolSize))</span><br><span class="line">                    .build();</span><br><span class="line">            <span class="comment">//配置信息Settings自定义</span></span><br><span class="line">            transportClient = <span class="keyword">new</span> PreBuiltTransportClient(esSetting);</span><br><span class="line">            TransportAddress transportAddress = <span class="keyword">new</span> TransportAddress(InetAddress.getByName(hostName), Integer.valueOf(port));</span><br><span class="line">            transportClient.addTransportAddresses(transportAddress);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            LOGGER.error(<span class="string">"elasticsearch TransportClient create error!!"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> transportClient;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ol><ol start="3"><li><p>工具类</p><ol><li><p>对es操作进行封装</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> qiudx</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> $Id ElasticsearchUtil.java, v 0.1 2018-06-13 13:29 qiudx Exp $$</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ElasticsearchUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(ElasticsearchUtil<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> TransportClient transportClient;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> TransportClient client;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ElasticsearchUtil</span><span class="params">(TransportClient transportClient)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.transportClient = transportClient;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * spring容器初始化的时候执行该方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        client = <span class="keyword">this</span>.transportClient;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建索引</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">createIndex</span><span class="params">(String index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!isIndexExist(index)) &#123;</span><br><span class="line">            LOGGER.info(<span class="string">"Index is not exits!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        CreateIndexResponse indexresponse = client.admin().indices().prepareCreate(index).execute().actionGet();</span><br><span class="line">        LOGGER.info(<span class="string">"执行建立成功？"</span> + indexresponse.isAcknowledged());</span><br><span class="line">        <span class="keyword">return</span> indexresponse.isAcknowledged();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除索引</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">deleteIndex</span><span class="params">(String index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!isIndexExist(index)) &#123;</span><br><span class="line">            LOGGER.info(<span class="string">"Index is not exits!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        DeleteIndexResponse dResponse = client.admin().indices().prepareDelete(index).execute().actionGet();</span><br><span class="line">        <span class="keyword">if</span> (dResponse.isAcknowledged()) &#123;</span><br><span class="line">            LOGGER.info(<span class="string">"delete index "</span> + index + <span class="string">"  successfully!"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            LOGGER.info(<span class="string">"Fail to delete index "</span> + index);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dResponse.isAcknowledged();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断索引是否存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isIndexExist</span><span class="params">(String index)</span> </span>&#123;</span><br><span class="line">        IndicesExistsResponse inExistsResponse = client.admin().indices().exists(<span class="keyword">new</span> IndicesExistsRequest(index)).actionGet();</span><br><span class="line">        <span class="keyword">if</span> (inExistsResponse.isExists()) &#123;</span><br><span class="line">            LOGGER.info(<span class="string">"Index ["</span> + index + <span class="string">"] is exist!"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            LOGGER.info(<span class="string">"Index ["</span> + index + <span class="string">"] is not exist!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> inExistsResponse.isExists();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据添加，正定ID</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jsonObject 要增加的数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index      索引，类似数据库</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> type       类型，类似表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id         数据ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">addData</span><span class="params">(JSONObject jsonObject, String index, String type, String id)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        IndexResponse response = client.prepareIndex(index, type, id).setSource(jsonObject).get();</span><br><span class="line"></span><br><span class="line">        LOGGER.info(<span class="string">"addData response status:&#123;&#125;,id:&#123;&#125;"</span>, response.status().getStatus(), response.getId());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> response.getId();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据添加</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jsonObject 要增加的数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index      索引，类似数据库</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> type       类型，类似表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">addData</span><span class="params">(JSONObject jsonObject, String index, String type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> addData(jsonObject, index, type, UUID.randomUUID().toString().replaceAll(<span class="string">"-"</span>, <span class="string">""</span>).toUpperCase());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过ID删除数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 索引，类似数据库</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> type  类型，类似表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id    数据ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">deleteDataById</span><span class="params">(String index, String type, String id)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        DeleteResponse response = client.prepareDelete(index, type, id).execute().actionGet();</span><br><span class="line"></span><br><span class="line">        LOGGER.info(<span class="string">"deleteDataById response status:&#123;&#125;,id:&#123;&#125;"</span>, response.status().getStatus(), response.getId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过ID 更新数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jsonObject 要增加的数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index      索引，类似数据库</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> type       类型，类似表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id         数据ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">updateDataById</span><span class="params">(JSONObject jsonObject, String index, String type, String id)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        UpdateRequest updateRequest = <span class="keyword">new</span> UpdateRequest();</span><br><span class="line"></span><br><span class="line">        updateRequest.index(index).type(type).id(id).doc(jsonObject);</span><br><span class="line"></span><br><span class="line">        client.update(updateRequest);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过ID获取数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index  索引，类似数据库</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> type   类型，类似表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id     数据ID</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fields 需要显示的字段，逗号分隔（缺省为全部字段）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, Object&gt; <span class="title">searchDataById</span><span class="params">(String index, String type, String id, String fields)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        GetRequestBuilder getRequestBuilder = client.prepareGet(index, type, id);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isNotEmpty(fields)) &#123;</span><br><span class="line">            getRequestBuilder.setFetchSource(fields.split(<span class="string">","</span>), <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        GetResponse getResponse = getRequestBuilder.execute().actionGet();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> getResponse.getSource();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用分词查询,并分页</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index          索引名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> type           类型名称,可传入多个type逗号分隔</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> startPage      当前页</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pageSize       每页显示条数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> query          查询条件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fields         需要显示的字段，逗号分隔（缺省为全部字段）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sortField      排序字段</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> highlightField 高亮字段</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> EsPage <span class="title">searchDataPage</span><span class="params">(String index, String type, <span class="keyword">int</span> startPage, <span class="keyword">int</span> pageSize, QueryBuilder query, String fields, String sortField, String highlightField)</span> </span>&#123;</span><br><span class="line">        SearchRequestBuilder searchRequestBuilder = client.prepareSearch(index);</span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isNotEmpty(type)) &#123;</span><br><span class="line">            searchRequestBuilder.setTypes(type.split(<span class="string">","</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        searchRequestBuilder.setSearchType(SearchType.QUERY_THEN_FETCH);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 需要显示的字段，逗号分隔（缺省为全部字段）</span></span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isNotEmpty(fields)) &#123;</span><br><span class="line">            searchRequestBuilder.setFetchSource(fields.split(<span class="string">","</span>), <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//排序字段</span></span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isNotEmpty(sortField)) &#123;</span><br><span class="line">            searchRequestBuilder.addSort(sortField, SortOrder.DESC);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 高亮（xxx=111,aaa=222）</span></span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isNotEmpty(highlightField)) &#123;</span><br><span class="line">            HighlightBuilder highlightBuilder = <span class="keyword">new</span> HighlightBuilder();</span><br><span class="line"> </span><br><span class="line">            <span class="comment">//highlightBuilder.preTags("&lt;span style='color:red' &gt;");//设置前缀</span></span><br><span class="line">            <span class="comment">//highlightBuilder.postTags("&lt;/span&gt;");//设置后缀</span></span><br><span class="line"> </span><br><span class="line">            <span class="comment">// 设置高亮字段</span></span><br><span class="line">            highlightBuilder.field(highlightField);</span><br><span class="line">            searchRequestBuilder.highlighter(highlightBuilder);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//searchRequestBuilder.setQuery(QueryBuilders.matchAllQuery());</span></span><br><span class="line">        searchRequestBuilder.setQuery(query);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 分页应用</span></span><br><span class="line">        searchRequestBuilder.setFrom(startPage).setSize(pageSize);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 设置是否按查询匹配度排序</span></span><br><span class="line">        searchRequestBuilder.setExplain(<span class="keyword">true</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//打印的内容 可以在 Elasticsearch head 和 Kibana  上执行查询</span></span><br><span class="line">        LOGGER.info(<span class="string">"\n&#123;&#125;"</span>, searchRequestBuilder);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 执行搜索,返回搜索响应信息</span></span><br><span class="line">        SearchResponse searchResponse = searchRequestBuilder.execute().actionGet();</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">long</span> totalHits = searchResponse.getHits().totalHits;</span><br><span class="line">        <span class="keyword">long</span> length = searchResponse.getHits().getHits().length;</span><br><span class="line"> </span><br><span class="line">        LOGGER.debug(<span class="string">"共查询到[&#123;&#125;]条数据,处理数据条数[&#123;&#125;]"</span>, totalHits, length);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> (searchResponse.status().getStatus() == <span class="number">200</span>) &#123;</span><br><span class="line">            <span class="comment">// 解析对象</span></span><br><span class="line">            List&lt;Map&lt;String, Object&gt;&gt; sourceList = setSearchResponse(searchResponse, highlightField);</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> EsPage(startPage, pageSize, (<span class="keyword">int</span>) totalHits, sourceList);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用分词查询</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index          索引名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> type           类型名称,可传入多个type逗号分隔</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> query          查询条件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> size           文档大小限制</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fields         需要显示的字段，逗号分隔（缺省为全部字段）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sortField      排序字段</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> highlightField 高亮字段</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Map&lt;String, Object&gt;&gt; searchListData(String index, String type, QueryBuilder query, Integer size, String fields, String sortField, String highlightField) &#123;</span><br><span class="line"> </span><br><span class="line">        SearchRequestBuilder searchRequestBuilder = client.prepareSearch(index);</span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isNotEmpty(type)) &#123;</span><br><span class="line">            searchRequestBuilder.setTypes(type.split(<span class="string">","</span>));</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isNotEmpty(highlightField)) &#123;</span><br><span class="line">            HighlightBuilder highlightBuilder = <span class="keyword">new</span> HighlightBuilder();</span><br><span class="line">            <span class="comment">// 设置高亮字段</span></span><br><span class="line">            highlightBuilder.field(highlightField);</span><br><span class="line">            searchRequestBuilder.highlighter(highlightBuilder);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        searchRequestBuilder.setQuery(query);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isNotEmpty(fields)) &#123;</span><br><span class="line">            searchRequestBuilder.setFetchSource(fields.split(<span class="string">","</span>), <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        searchRequestBuilder.setFetchSource(<span class="keyword">true</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isNotEmpty(sortField)) &#123;</span><br><span class="line">            searchRequestBuilder.addSort(sortField, SortOrder.DESC);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> (size != <span class="keyword">null</span> &amp;&amp; size &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            searchRequestBuilder.setSize(size);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//打印的内容 可以在 Elasticsearch head 和 Kibana  上执行查询</span></span><br><span class="line">        LOGGER.info(<span class="string">"\n&#123;&#125;"</span>, searchRequestBuilder);</span><br><span class="line"> </span><br><span class="line">        SearchResponse searchResponse = searchRequestBuilder.execute().actionGet();</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">long</span> totalHits = searchResponse.getHits().totalHits;</span><br><span class="line">        <span class="keyword">long</span> length = searchResponse.getHits().getHits().length;</span><br><span class="line"> </span><br><span class="line">        LOGGER.info(<span class="string">"共查询到[&#123;&#125;]条数据,处理数据条数[&#123;&#125;]"</span>, totalHits, length);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> (searchResponse.status().getStatus() == <span class="number">200</span>) &#123;</span><br><span class="line">            <span class="comment">// 解析对象</span></span><br><span class="line">            <span class="keyword">return</span> setSearchResponse(searchResponse, highlightField);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 高亮结果集 特殊处理</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;Map&lt;String, Object&gt;&gt; setSearchResponse(SearchResponse searchResponse, String highlightField) &#123;</span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; sourceList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        StringBuilder stringBuffer = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (SearchHit searchHit : searchResponse.getHits().getHits()) &#123;</span><br><span class="line">            searchHit.getSourceAsMap().put(<span class="string">"id"</span>, searchHit.getId());</span><br><span class="line">    </span><br><span class="line">            <span class="keyword">if</span> (StrUtil.isNotEmpty(highlightField)) &#123;</span><br><span class="line">    </span><br><span class="line">                System.out.println(<span class="string">"遍历 高亮结果集，覆盖 正常结果集"</span> + searchHit.getSourceAsMap());</span><br><span class="line">                Text[] text = searchHit.getHighlightFields().get(highlightField).getFragments();</span><br><span class="line">    </span><br><span class="line">                <span class="keyword">if</span> (text != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (Text str : text) &#123;</span><br><span class="line">                        stringBuffer.append(str.string());</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//遍历 高亮结果集，覆盖 正常结果集</span></span><br><span class="line">                    searchHit.getSourceAsMap().put(highlightField, stringBuffer.toString());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            sourceList.add(searchHit.getSourceAsMap());</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> sourceList;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ol><ol start="2"><li><p>分页工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> qiudx</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> $Id EsPage.java, v 0.1 2018-06-13 13:32 qiudx Exp $$</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EsPage</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前页</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> currentPage;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 每页显示多少条</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> pageSize;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 总记录数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> recordCount;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 本页的数据列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Map&lt;String, Object&gt;&gt; recordList;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 总页数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> pageCount;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 页码列表的开始索引（包含）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> beginPageIndex;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 页码列表的结束索引（包含）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> endPageIndex;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 只接受前4个必要的属性，会自动的计算出其他3个属性的值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EsPage</span><span class="params">(<span class="keyword">int</span> currentPage, <span class="keyword">int</span> pageSize, <span class="keyword">int</span> recordCount, List&lt;Map&lt;String, Object&gt;&gt; recordList)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.currentPage = currentPage;</span><br><span class="line">        <span class="keyword">this</span>.pageSize = pageSize;</span><br><span class="line">        <span class="keyword">this</span>.recordCount = recordCount;</span><br><span class="line">        <span class="keyword">this</span>.recordList = recordList;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 计算总页码</span></span><br><span class="line">        pageCount = (recordCount + pageSize - <span class="number">1</span>) / pageSize;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 计算 beginPageIndex 和 endPageIndex</span></span><br><span class="line">        <span class="comment">// &gt;&gt; 总页数不多于10页，则全部显示</span></span><br><span class="line">        <span class="keyword">if</span> (pageCount &lt;= <span class="number">10</span>) &#123;</span><br><span class="line">            beginPageIndex = <span class="number">1</span>;</span><br><span class="line">            endPageIndex = pageCount;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">// &gt;&gt; 总页数多于10页，则显示当前页附近的共10个页码</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 当前页附近的共10个页码（前4个 + 当前页 + 后5个）</span></span><br><span class="line">            beginPageIndex = currentPage - <span class="number">4</span>;</span><br><span class="line">            endPageIndex = currentPage + <span class="number">5</span>;</span><br><span class="line">            <span class="comment">// 当前面的页码不足4个时，则显示前10个页码</span></span><br><span class="line">            <span class="keyword">if</span> (beginPageIndex &lt; <span class="number">1</span>) &#123;</span><br><span class="line">                beginPageIndex = <span class="number">1</span>;</span><br><span class="line">                endPageIndex = <span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">// 当后面的页码不足5个时，则显示后10个页码</span></span><br><span class="line">            <span class="keyword">if</span> (endPageIndex &gt; pageCount) &#123;</span><br><span class="line">                endPageIndex = pageCount;</span><br><span class="line">                beginPageIndex = pageCount - <span class="number">10</span> + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCurrentPage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> currentPage;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCurrentPage</span><span class="params">(<span class="keyword">int</span> currentPage)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.currentPage = currentPage;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPageSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pageSize;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPageSize</span><span class="params">(<span class="keyword">int</span> pageSize)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.pageSize = pageSize;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getRecordCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> recordCount;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRecordCount</span><span class="params">(<span class="keyword">int</span> recordCount)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.recordCount = recordCount;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> List&lt;Map&lt;String, Object&gt;&gt; getRecordList() &#123;</span><br><span class="line">        <span class="keyword">return</span> recordList;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRecordList</span><span class="params">(List&lt;Map&lt;String, Object&gt;&gt; recordList)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.recordList = recordList;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPageCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pageCount;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPageCount</span><span class="params">(<span class="keyword">int</span> pageCount)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.pageCount = pageCount;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getBeginPageIndex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> beginPageIndex;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBeginPageIndex</span><span class="params">(<span class="keyword">int</span> beginPageIndex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.beginPageIndex = beginPageIndex;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getEndPageIndex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> endPageIndex;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEndPageIndex</span><span class="params">(<span class="keyword">int</span> endPageIndex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.endPageIndex = endPageIndex;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol start="4"><li><p>实体</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> qiudx</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> $Id EsModel.java, v 0.1 2018-06-13 13:40 qiudx Exp $$</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EsModel</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> Date date;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Getter method for property &lt;tt&gt;id&lt;/tt&gt;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> property value of id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Setter method for property &lt;tt&gt;id&lt;/tt&gt;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id value to be assigned to property id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Getter method for property &lt;tt&gt;name&lt;/tt&gt;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> property value of name</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Setter method for property &lt;tt&gt;name&lt;/tt&gt;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name value to be assigned to property name</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Getter method for property &lt;tt&gt;age&lt;/tt&gt;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> property value of age</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Setter method for property &lt;tt&gt;age&lt;/tt&gt;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> age value to be assigned to property age</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Getter method for property &lt;tt&gt;date&lt;/tt&gt;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> property value of date</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getDate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> date;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Setter method for property &lt;tt&gt;date&lt;/tt&gt;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> date value to be assigned to property date</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDate</span><span class="params">(Date date)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.date = date;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> qiudx</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> $Id EsController.java, v 0.1 2018-06-13 13:36 qiudx Exp $$</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/es"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EsController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试索引</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String indexName = <span class="string">"test_index"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String esType = <span class="string">"external"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * http://127.0.0.1:8080/es/createIndex</span></span><br><span class="line"><span class="comment">     * 创建索引</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/createIndex"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">createIndex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!ElasticsearchUtil.isIndexExist(indexName)) &#123;</span><br><span class="line">            ElasticsearchUtil.createIndex(indexName);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"索引已经存在"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"索引创建成功"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入记录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/insertJson"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">insertJson</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        JSONObject jsonObject = <span class="keyword">new</span> JSONObject();</span><br><span class="line">        jsonObject.put(<span class="string">"id"</span>, DateUtil.formatDate(<span class="keyword">new</span> Date()));</span><br><span class="line">        jsonObject.put(<span class="string">"age"</span>, <span class="number">25</span>);</span><br><span class="line">        jsonObject.put(<span class="string">"name"</span>, <span class="string">"j-"</span> + <span class="keyword">new</span> Random(<span class="number">100</span>).nextInt());</span><br><span class="line">        jsonObject.put(<span class="string">"date"</span>, <span class="keyword">new</span> Date());</span><br><span class="line">        <span class="keyword">return</span> ElasticsearchUtil.addData(jsonObject, indexName, esType, jsonObject.getString(<span class="string">"id"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入记录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/insertModel"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">insertModel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        EsModel esModel = <span class="keyword">new</span> EsModel();</span><br><span class="line">        esModel.setId(DateUtil.formatDate(<span class="keyword">new</span> Date()));</span><br><span class="line">        esModel.setName(<span class="string">"m-"</span> + <span class="keyword">new</span> Random(<span class="number">100</span>).nextInt());</span><br><span class="line">        esModel.setAge(<span class="number">30</span>);</span><br><span class="line">        esModel.setDate(<span class="keyword">new</span> Date());</span><br><span class="line">        JSONObject jsonObject = (JSONObject) JSONObject.toJSON(esModel);</span><br><span class="line">        <span class="keyword">return</span> ElasticsearchUtil.addData(jsonObject, indexName, esType, jsonObject.getString(<span class="string">"id"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除记录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/delete"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">delete</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isNotBlank(id)) &#123;</span><br><span class="line">            ElasticsearchUtil.deleteDataById(indexName, esType, id);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"删除id="</span> + id;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"id为空"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/update"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">update</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isNotBlank(id)) &#123;</span><br><span class="line">            JSONObject jsonObject = <span class="keyword">new</span> JSONObject();</span><br><span class="line">            jsonObject.put(<span class="string">"id"</span>, id);</span><br><span class="line">            jsonObject.put(<span class="string">"age"</span>, <span class="number">31</span>);</span><br><span class="line">            jsonObject.put(<span class="string">"name"</span>, <span class="string">"修改"</span>);</span><br><span class="line">            jsonObject.put(<span class="string">"date"</span>, <span class="keyword">new</span> Date());</span><br><span class="line">            ElasticsearchUtil.updateDataById(jsonObject, indexName, esType, id);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"id="</span> + id;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"id为空"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取数据</span></span><br><span class="line"><span class="comment">     * http://127.0.0.1:8080/es/getData?id=2018-04-25%2016:33:44</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/getData"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getData</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isNotBlank(id)) &#123;</span><br><span class="line">            Map&lt;String, Object&gt; map = ElasticsearchUtil.searchDataById(indexName, esType, id, <span class="keyword">null</span>);</span><br><span class="line">            <span class="keyword">return</span> JSONObject.toJSONString(map);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"id为空"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询数据</span></span><br><span class="line"><span class="comment">     * 模糊查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/queryMatchData"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">queryMatchData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        BoolQueryBuilder boolQuery = QueryBuilders.boolQuery();</span><br><span class="line">        boolQuery.must(QueryBuilders.matchQuery(<span class="string">"name"</span>, <span class="string">"修"</span>));</span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; list = ElasticsearchUtil.searchListData(indexName, esType, boolQuery, <span class="number">10</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">return</span> JSONObject.toJSONString(list);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通配符查询数据</span></span><br><span class="line"><span class="comment">     * 通配符查询 ?用来匹配1个任意字符，*用来匹配零个或者多个字符</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/queryWildcardData"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">queryWildcardData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        QueryBuilder queryBuilder = QueryBuilders.wildcardQuery(<span class="string">"name.keyword"</span>, <span class="string">"修*"</span>);</span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; list = ElasticsearchUtil.searchListData(indexName, esType, queryBuilder, <span class="number">10</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">return</span> JSONObject.toJSONString(list);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 正则查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/queryRegexpData"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">queryRegexpData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        QueryBuilder queryBuilder = QueryBuilders.regexpQuery(<span class="string">"name.keyword"</span>, <span class="string">"j--[0-9]&#123;1,11&#125;"</span>);</span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; list = ElasticsearchUtil.searchListData(indexName, esType, queryBuilder, <span class="number">10</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">return</span> JSONObject.toJSONString(list);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询数字范围数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/queryIntRangeData"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">queryIntRangeData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        BoolQueryBuilder boolQuery = QueryBuilders.boolQuery();</span><br><span class="line">        boolQuery.must(QueryBuilders.rangeQuery(<span class="string">"age"</span>).from(<span class="number">31</span>)</span><br><span class="line">                .to(<span class="number">32</span>));</span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; list = ElasticsearchUtil.searchListData(indexName, esType, boolQuery, <span class="number">10</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">return</span> JSONObject.toJSONString(list);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询日期范围数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/queryDateRangeData"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">queryDateRangeData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        BoolQueryBuilder boolQuery = QueryBuilders.boolQuery();</span><br><span class="line">        boolQuery.must(QueryBuilders.rangeQuery(<span class="string">"date"</span>).from(<span class="string">"2018-04-25T08:33:44.840Z"</span>)</span><br><span class="line">                .to(<span class="string">"2018-04-25T10:03:08.081Z"</span>));</span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; list = ElasticsearchUtil.searchListData(indexName, esType, boolQuery, <span class="number">10</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">return</span> JSONObject.toJSONString(list);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询分页</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> startPage 第几条记录开始</span></span><br><span class="line"><span class="comment">     *                  从0开始</span></span><br><span class="line"><span class="comment">     *                  第1页 ：http://127.0.0.1:8080/es/queryPage?startPage=0&amp;pageSize=2</span></span><br><span class="line"><span class="comment">     *                  第2页 ：http://127.0.0.1:8080/es/queryPage?startPage=2&amp;pageSize=2</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pageSize  每页大小</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/queryPage"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">queryPage</span><span class="params">(String startPage, String pageSize)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isNotBlank(startPage) &amp;&amp; StrUtil.isNotBlank(pageSize)) &#123;</span><br><span class="line">            BoolQueryBuilder boolQuery = QueryBuilders.boolQuery();</span><br><span class="line">            boolQuery.must(QueryBuilders.rangeQuery(<span class="string">"date"</span>).from(<span class="string">"2018-04-25T08:33:44.840Z"</span>)</span><br><span class="line">                    .to(<span class="string">"2018-04-25T10:03:08.081Z"</span>));</span><br><span class="line">            EsPage list = ElasticsearchUtil.searchDataPage(indexName, esType, Integer.parseInt(startPage), Integer.parseInt(pageSize), boolQuery, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">            <span class="keyword">return</span> JSONObject.toJSONString(list);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"startPage或者pageSize缺失"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;概要&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;是什么&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;名词解释&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;elasticsearch简单使用&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="java" scheme="https://www.qiudx.top/categories/java/"/>
    
    
      <category term="java" scheme="https://www.qiudx.top/tags/java/"/>
    
      <category term="spring boot" scheme="https://www.qiudx.top/tags/spring-boot/"/>
    
  </entry>
  
  <entry>
    <title>WebSocket使用心得</title>
    <link href="https://www.qiudx.top/2018/02/22/WebSocket%E4%BD%BF%E7%94%A8%E5%BF%83%E5%BE%97/"/>
    <id>https://www.qiudx.top/2018/02/22/WebSocket%E4%BD%BF%E7%94%A8%E5%BF%83%E5%BE%97/</id>
    <published>2018-02-22T08:44:08.000Z</published>
    <updated>2020-01-07T11:02:12.934Z</updated>
    
    <content type="html"><![CDATA[<p><strong>概要</strong></p><ul><li>2018年第一天上班</li></ul><ul><li><p>WebSocket 简介</p></li><li><p>spring-boot-websocket的使用</p></li></ul><a id="more"></a><p>前言: <em>2018年上班第一天,没什么事,就将前些天写的一个关于智能面试机器人项目中使用到的websoket总结如下:</em></p><h2 id="WebSocket-简介"><a href="#WebSocket-简介" class="headerlink" title="WebSocket 简介"></a>WebSocket 简介</h2><p>WebSocket是HTML5一种新的协议。它实现了浏览器与服务器全双工通信，能更好的节省服务器资源和带宽并达到实时通讯，它建立在TCP之上，同HTTP一样通过TCP来传输数据，但是它和HTTP最大不同是：</p><ul><li>WebSocket 是一种双向通信协议，在建立连接后，WebSocket服务器和Browser/Client Agent都能主动的向对方发送或接收数据，就像Socket一样；</li><li>WebSocket 需要类似TCP的客户端和服务器端通过握手连接，连接成功后才能相互通信。</li></ul><h2 id="spring-boot-websocket的使用"><a href="#spring-boot-websocket的使用" class="headerlink" title="spring-boot-websocket的使用"></a>spring-boot-websocket的使用</h2><h3 id="1-maven依赖"><a href="#1-maven依赖" class="headerlink" title="1.maven依赖"></a>1.maven依赖</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-websocket&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="3-配置文件"><a href="#3-配置文件" class="headerlink" title="3.配置文件"></a>3.配置文件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyEndpointConfigure</span> <span class="keyword">extends</span> <span class="title">ServerEndpointConfig</span>.<span class="title">Configurator</span> <span class="keyword">implements</span> <span class="title">ApplicationContextAware</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span>  BeanFactory context;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">getEndpointInstance</span><span class="params">(Class&lt;T&gt; clazz)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> context.getBean(clazz);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        MyEndpointConfigure.context = applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSocketConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServerEndpointExporter <span class="title">serverEndpointExporter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ServerEndpointExporter();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-核心websocket"><a href="#3-核心websocket" class="headerlink" title="3.核心websocket"></a>3.核心websocket</h3><p><strong>特别注意: 不能使用默认的ServerEndpointConfig.Configurator.class,不然会导致服务无法注入</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ServerEndpoint</span>(value = <span class="string">"/websocket"</span>, configurator = MyEndpointConfigure<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">Component</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">WebSocket</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 成功建立连接调用的方法.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@OnOpen</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onOpen</span><span class="params">(Session session)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 连接关闭调用的方法.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@OnClose</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClose</span><span class="params">(Session session)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 收到客户端消息后调用的方法.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@OnMessage</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(String message, Session session)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发生错误时调用.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@OnError</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Session session, Throwable error)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;概要&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;2018年第一天上班&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;WebSocket 简介&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;spring-boot-websocket的使用&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="java" scheme="https://www.qiudx.top/categories/java/"/>
    
    
      <category term="java" scheme="https://www.qiudx.top/tags/java/"/>
    
      <category term="spring boot" scheme="https://www.qiudx.top/tags/spring-boot/"/>
    
  </entry>
  
  <entry>
    <title>Feign的简单使用</title>
    <link href="https://www.qiudx.top/2017/12/20/Feign%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
    <id>https://www.qiudx.top/2017/12/20/Feign%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</id>
    <published>2017-12-20T08:41:23.000Z</published>
    <updated>2020-01-07T10:24:08.191Z</updated>
    
    <content type="html"><![CDATA[<p><strong>概要</strong></p><ul><li>Feign简介</li><li>Feign简单使用</li></ul><a id="more"></a><h2 id="Feign简介"><a href="#Feign简介" class="headerlink" title="Feign简介"></a>Feign简介</h2><p>Feign是一个声明式的web 服务客户端；它支持可插拔的注解，包含Feign注解和JAX-RS注解；并且支持可插拔的编码、解码；</p><h2 id="Feign使用"><a href="#Feign使用" class="headerlink" title="Feign使用"></a>Feign使用</h2><h3 id="1-maven依赖"><a href="#1-maven依赖" class="headerlink" title="1.maven依赖"></a>1.maven依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--用于feign的编解码--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.github.openfeign<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>feign-gson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>9.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--feign的核心依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.netflix.feign<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>feign-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.18.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--用于feign的请求--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.netflix.feign<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>feign-okhttp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.18.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-服务消费段-自定义接口"><a href="#2-服务消费段-自定义接口" class="headerlink" title="2.服务消费段(自定义接口)"></a>2.服务消费段(自定义接口)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RemoteService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestLine</span>(<span class="string">"GET /getUser?name=&#123;name&#125;&amp;age=&#123;age&#125;"</span>)</span><br><span class="line">    <span class="function">User <span class="title">getUser</span><span class="params">(@Param(<span class="string">"name"</span>)</span> String name, @<span class="title">Param</span><span class="params">(<span class="string">"age"</span>)</span> <span class="keyword">int</span> age)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-服务生产端"><a href="#3-服务生产端" class="headerlink" title="3.服务生产端"></a>3.服务生产端</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeignController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"getUser"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(@RequestParam String name, @RequestParam <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setAge(age);</span><br><span class="line">        user.setName(name);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-测试-服务消费段"><a href="#4-测试-服务消费段" class="headerlink" title="4.测试(服务消费段)"></a>4.测试(服务消费段)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeignControllerTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        RemoteService remoteService = Feign.builder()</span><br><span class="line">                .client(<span class="keyword">new</span> OkHttpClient())</span><br><span class="line">                .decoder(<span class="keyword">new</span> GsonDecoder())</span><br><span class="line">                .encoder(<span class="keyword">new</span> GsonEncoder())</span><br><span class="line">                .options(<span class="keyword">new</span> Request.Options(<span class="number">1000</span>, <span class="number">2000</span>))</span><br><span class="line">                .retryer(<span class="keyword">new</span> Retryer.Default(<span class="number">1000</span>, <span class="number">2000</span>, <span class="number">2</span>))       </span><br><span class="line">                .target(RemoteService.class, "http://127.0.0.1:8080");</span><br><span class="line">        User user = remoteService.getUser(<span class="string">"qiudx"</span>, <span class="number">23</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>OkHttpClient使用OkHttp来发送Feign的请求,OkHttp支持SPDY(SPDY是Google开发的基于TCP的传输层协议,用以最小化网络延迟,提升网络速度,优化用户的网络使用体验),并有更好的控制http请求。</li><li>Feign.builder()允许你自定义一些额外的配置,比如说如何解码一个响应。假如有接口方法返回的消息不是Response,String,byte[]或者void类型的,那么你需要配置一个非默认的解码器</li><li>options方法指定连接超时时长及响应超时时长</li><li>retryer方法指定重试策略</li><li>target方法绑定接口与服务端地址</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;概要&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Feign简介&lt;/li&gt;&lt;li&gt;Feign简单使用&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="java" scheme="https://www.qiudx.top/categories/java/"/>
    
    
      <category term="java" scheme="https://www.qiudx.top/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>令牌桶限流</title>
    <link href="https://www.qiudx.top/2017/12/07/%E4%BB%A4%E7%89%8C%E6%A1%B6%E9%99%90%E6%B5%81/"/>
    <id>https://www.qiudx.top/2017/12/07/%E4%BB%A4%E7%89%8C%E6%A1%B6%E9%99%90%E6%B5%81/</id>
    <published>2017-12-07T08:45:40.000Z</published>
    <updated>2020-01-07T10:33:24.139Z</updated>
    
    <content type="html"><![CDATA[<p><strong>概要</strong></p><ul><li>在项目中引入Guava相关包</li><li>创建拦截器</li><li>添加拦截器</li><li>测试</li></ul><a id="more"></a><p>在使用SpringBoot做接口访问如何做接口的限流，这里我们可以使用google的Guava包来实现.</p><h4 id="1-在项目中引入Guava相关包"><a href="#1-在项目中引入Guava相关包" class="headerlink" title="1.在项目中引入Guava相关包"></a>1.在项目中引入Guava相关包</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.guava<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>guava<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>23.5-jre<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-创建拦截器"><a href="#2-创建拦截器" class="headerlink" title="2.创建拦截器"></a>2.创建拦截器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthInterceptor</span> <span class="keyword">extends</span> <span class="title">HandlerInterceptorAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">enum</span> LimiterTypeEnum &#123;</span><br><span class="line">        DROP,<span class="comment">//丢弃</span></span><br><span class="line">        WAIT <span class="comment">//等待</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//限流器</span></span><br><span class="line">    <span class="keyword">private</span> RateLimiter rateLimiter;</span><br><span class="line">    <span class="comment">//限流类型</span></span><br><span class="line">    <span class="keyword">private</span> LimiterTypeEnum limiterType;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> permitsPerSecond 限流量 (每秒处理量)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> limiterType      限流类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AuthInterceptor</span><span class="params">(<span class="keyword">int</span> permitsPerSecond, LimiterTypeEnum limiterType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.rateLimiter = RateLimiter.create(permitsPerSecond);</span><br><span class="line">        <span class="keyword">this</span>.limiterType = limiterType;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> permitsPerSecond 每秒新增的令牌数(这个是平滑增长,有一个预热过程)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> limiterType      限流类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AuthInterceptor</span><span class="params">(<span class="keyword">double</span> permitsPerSecond, LimiterTypeEnum limiterType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.rateLimiter = RateLimiter.create(permitsPerSecond, <span class="number">1</span>, TimeUnit.SECONDS);</span><br><span class="line">        <span class="keyword">this</span>.limiterType = limiterType;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (Objects.equals(limiterType, LimiterTypeEnum.DROP)) &#123;</span><br><span class="line">            <span class="keyword">return</span> rateLimiter.tryAcquire(); <span class="comment">//false为被限流</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            rateLimiter.acquire();<span class="comment">//一直等待,直到拿到令牌</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-添加拦截器"><a href="#3-添加拦截器" class="headerlink" title="3.添加拦截器"></a>3.添加拦截器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthHandlerAdapter</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> AuthInterceptor(<span class="number">10</span>, AuthInterceptor.LimiterTypeEnum.DROP))</span><br><span class="line">                .addPathPatterns(<span class="string">"/*"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-测试"><a href="#4-测试" class="headerlink" title="4.测试"></a>4.测试</h4><ul><li>controller<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">TestGetString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"爱生活,爱java"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>并发请求<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        HttpClient httpClient = <span class="keyword">new</span> HttpClient(<span class="string">"http://127.0.0.1:8080"</span>, <span class="number">2000</span>, <span class="number">2000</span>);</span><br><span class="line">        IntStream.range(<span class="number">0</span>, <span class="number">1000</span>).forEach(value -&gt; &#123;</span><br><span class="line">            testSend(httpClient);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.MILLISECONDS.sleep(<span class="number">100</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testSend</span><span class="params">(HttpClient httpClient)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            httpClient.sendGet(<span class="string">"UTF-8"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;概要&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;在项目中引入Guava相关包&lt;/li&gt;&lt;li&gt;创建拦截器&lt;/li&gt;&lt;li&gt;添加拦截器&lt;/li&gt;&lt;li&gt;测试&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="java" scheme="https://www.qiudx.top/categories/java/"/>
    
    
      <category term="java" scheme="https://www.qiudx.top/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot自定义拦截器</title>
    <link href="https://www.qiudx.top/2017/12/06/Spring-Boot%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8B%A6%E6%88%AA%E5%99%A8/"/>
    <id>https://www.qiudx.top/2017/12/06/Spring-Boot%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8B%A6%E6%88%AA%E5%99%A8/</id>
    <published>2017-12-06T08:25:08.000Z</published>
    <updated>2020-01-03T16:36:40.217Z</updated>
    
    <content type="html"><![CDATA[<p><strong>概要</strong></p><ul><li><p>HandlerInterceptor介绍</p></li><li><p>spring boot自定义拦截器实现</p></li></ul><a id="more"></a><h3 id="HandlerInterceptor介绍"><a href="#HandlerInterceptor介绍" class="headerlink" title="HandlerInterceptor介绍"></a>HandlerInterceptor介绍</h3><p>Spring提供的拦截器Interceptor与Servlet中的Filter不同的是, Interceptor采用AOP的方式在Servlet的service方法执行之前进行拦截, 可以进行更精细的控制</p><p>Interceptor中有如下方法:</p><ul><li>preHandle: 在Controller处理之前调用, 返回false时整个请求结束</li><li>postHandle: 在Controller调用之后执行, 但它会在DispatcherServlet进行视图的渲染之前执行, 也就是说在这个方法中你可以对ModelAndView进行操作</li><li>afterCompletion: 在整个请求完成之后执行, 也就是DispatcherServlet已经渲染了视图之后执行; 这个方法的主要作用是用于清理资源的</li><li>afterConcurrentHandlingStarted: 这个方法是AsyncHandlerInterceptor接口中添加的. 当Controller中有异步请求方法的时候会触发该方法, 异步请求先支持preHandle、然后执行afterConcurrentHandlingStarted, 异步线程完成之后执行会再执行preHandle、postHandle、afterCompletion<br>关于最后那个方法, 举个列子:<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExampleController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/"</span>)</span><br><span class="line">    <span class="function">DeferredResult&lt;String&gt; <span class="title">home</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DeferredResult&lt;String&gt; dr = <span class="keyword">new</span> DeferredResult&lt;String&gt;();</span><br><span class="line">        dr.setResult(<span class="string">"成功"</span>);</span><br><span class="line">        <span class="keyword">return</span> dr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>上面这样的Controller里面有个异步结果, 则拦截器的执行顺序将是: preHandle -&gt; afterConcurrentHandlingStarted -&gt; preHandle -&gt; postHandle -&gt; afterCompletion.</li></ul><p>如果把dr.setResult(“成功”); 这句删掉, 将只执行preHandle -&gt; afterConcurrentHandlingStarted</p><p>可以认为, afterConcurrentHandlingStarted是返回异步结果时调用(此时异步结果里不需要有数据), 而postHandle必须是返回的结果执行完, 异步结果中有数据了(dr.setResult)才调用</p><h3 id="spring-boot自定义拦截器实现"><a href="#spring-boot自定义拦截器实现" class="headerlink" title="spring boot自定义拦截器实现"></a>spring boot自定义拦截器实现</h3><ol><li>拦截器的编写<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthInterceptor</span> <span class="keyword">extends</span> <span class="title">HandlerInterceptorAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 前置检查</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!handler.getClass().isAssignableFrom(HandlerMethod<span class="class">.<span class="keyword">class</span>)) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        String ip = request.getRemoteAddr();</span><br><span class="line">        <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">        request.setAttribute(<span class="string">"requestStartTime"</span>, startTime);</span><br><span class="line">        HandlerMethod handlerMethod = (HandlerMethod) handler;</span><br><span class="line">        Method method = handlerMethod.getMethod();</span><br><span class="line">        System.out.println(<span class="string">"用户:"</span> + ip + <span class="string">",访问目标:"</span> + method.getDeclaringClass().getName() + <span class="string">"."</span> + method.getName());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Controller调用之后执行</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> </span>&#123;</span><br><span class="line">        HandlerMethod handlerMethod = (HandlerMethod) handler;</span><br><span class="line">        Method method = handlerMethod.getMethod();</span><br><span class="line">        <span class="keyword">long</span> startTime = (Long) request.getAttribute(<span class="string">"requestStartTime"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> endTime = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> executeTime = endTime - startTime;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// log it</span></span><br><span class="line">        <span class="keyword">if</span> (executeTime &gt; <span class="number">1000</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"["</span> + method.getDeclaringClass().getName() + <span class="string">"."</span> + method.getName() + <span class="string">"] 执行耗时 : "</span></span><br><span class="line">                    + executeTime + <span class="string">"ms"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"["</span> + method.getDeclaringClass().getSimpleName() + <span class="string">"."</span> + method.getName() + <span class="string">"] 执行耗时 : "</span></span><br><span class="line">                    + executeTime + <span class="string">"ms"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>创建配置类继承WebMvcConfigurerAdapter<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthHandlerAdapter</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 拦截器</span></span><br><span class="line"><span class="comment">     * 由于项目集成了swagger,这里直接不拦截swagger的相关请求</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//AuthInterceptor就是我们自定义的拦截器</span></span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> AuthInterceptor())</span><br><span class="line">                .addPathPatterns(<span class="string">"/**"</span>)</span><br><span class="line">                .excludePathPatterns(<span class="string">"/swagger-ui.html"</span>)</span><br><span class="line">                .excludePathPatterns(<span class="string">"/swagger-resources/**"</span>)</span><br><span class="line">                .excludePathPatterns(<span class="string">"/v2/api-docs"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 资源处理器</span></span><br><span class="line"><span class="comment">     * swagger会和freemarker的静态资源路径冲突因此需配置swagger的资源处理器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addResourceHandler(<span class="string">"/swagger-ui.html"</span>)</span><br><span class="line">                .addResourceLocations(<span class="string">"classpath:/META-INF/resources/"</span>);</span><br><span class="line">        registry.addResourceHandler(<span class="string">"/webjars/**"</span>)</span><br><span class="line">                .addResourceLocations(<span class="string">"classpath:/META-INF/resources/webjars/"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;概要&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;HandlerInterceptor介绍&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;spring boot自定义拦截器实现&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="java" scheme="https://www.qiudx.top/categories/java/"/>
    
    
      <category term="java" scheme="https://www.qiudx.top/tags/java/"/>
    
      <category term="spring boot" scheme="https://www.qiudx.top/tags/spring-boot/"/>
    
  </entry>
  
  <entry>
    <title>使用FactoryBean来配置特定Bean</title>
    <link href="https://www.qiudx.top/2017/12/06/%E4%BD%BF%E7%94%A8FactoryBean%E6%9D%A5%E9%85%8D%E7%BD%AE%E7%89%B9%E5%AE%9ABean/"/>
    <id>https://www.qiudx.top/2017/12/06/%E4%BD%BF%E7%94%A8FactoryBean%E6%9D%A5%E9%85%8D%E7%BD%AE%E7%89%B9%E5%AE%9ABean/</id>
    <published>2017-12-06T07:55:43.000Z</published>
    <updated>2020-01-07T10:38:53.401Z</updated>
    
    <content type="html"><![CDATA[<p><strong>概要</strong></p><ul><li>创建实现FactoryBean的工厂</li><li>在xml配置bean</li><li>使用bean</li></ul><a id="more"></a><p>有时我们需要创建一些特定功能的bean,该如何做呢?</p><h3 id="1-创建实现FactoryBean的工厂"><a href="#1-创建实现FactoryBean的工厂" class="headerlink" title="1.创建实现FactoryBean的工厂"></a>1.创建实现FactoryBean的工厂</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyFactoryBean</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">FactoryBean</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Class&lt;T&gt; proxyInterface;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> QrpcProxy qrpcProxy;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ProxyFactoryBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ProxyFactoryBean</span><span class="params">(Class&lt;T&gt; proxyInterface)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.proxyInterface = proxyInterface;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getObject</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> qrpcProxy.create(proxyInterface);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.proxyInterface;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-在xml配置bean"><a href="#2-在xml配置bean" class="headerlink" title="2.在xml配置bean"></a>2.在xml配置bean</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"testService"</span> <span class="attr">class</span>=<span class="string">"com.qrpc.server.utils.ProxyFactoryBean"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"com.qrpc.api.facade.TestService"</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-使用"><a href="#3-使用" class="headerlink" title="3.使用"></a>3.使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TestService testService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(BASE_GETSTRING)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> testService.getString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;概要&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;创建实现FactoryBean的工厂&lt;/li&gt;&lt;li&gt;在xml配置bean&lt;/li&gt;&lt;li&gt;使用bean&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="java" scheme="https://www.qiudx.top/categories/java/"/>
    
    
      <category term="java" scheme="https://www.qiudx.top/tags/java/"/>
    
      <category term="spring" scheme="https://www.qiudx.top/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>spring boot自定义配置文件的读取</title>
    <link href="https://www.qiudx.top/2017/12/05/spring-boot%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%9A%84%E8%AF%BB%E5%8F%96/"/>
    <id>https://www.qiudx.top/2017/12/05/spring-boot%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%9A%84%E8%AF%BB%E5%8F%96/</id>
    <published>2017-12-05T08:11:20.000Z</published>
    <updated>2020-01-07T11:00:48.468Z</updated>
    
    <content type="html"><![CDATA[<p><strong>概要</strong></p><ul><li>Environment读取配置文件</li><li>Configurable方式读取配置文件</li><li>@PropertySource注解方式读取配置文件</li><li>使用@ConfigurationProperties读取配置文件</li></ul><a id="more"></a><p>在spring boot种自定义配置文件的读取很方便，不用在写propert的读取类来读取配置文件信息。</p><p>下面是我试过的读取springboot读取配置文件的几种方法：</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ol><li><p>在application.yml文件种加入配置信息：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">hank:</span></span><br><span class="line">  <span class="attr">testConfig:</span> <span class="string">TestDriver</span></span><br></pre></td></tr></table></figure></li><li><p>新建立配置文件 dbConfig.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">jdbc.driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="meta">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/test</span></span><br><span class="line"><span class="meta">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">jdbc.password</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">org.hank.testconfig</span>=<span class="string">testConfig</span></span><br></pre></td></tr></table></figure><h2 id="配置文件读取"><a href="#配置文件读取" class="headerlink" title="配置文件读取"></a>配置文件读取</h2><h3 id="1-Environment读取配置文件"><a href="#1-Environment读取配置文件" class="headerlink" title="1.Environment读取配置文件"></a>1.Environment读取配置文件</h3></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> Environment env;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testConfigDefault</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    logger.info(<span class="string">"Environment get default properties:"</span> + env.getProperty(<span class="string">"hank.testConfig"</span>));</span><br><span class="line">    logger.info(<span class="string">"Environment get self properties:"</span> + env.getProperty(<span class="string">"jdbc.driver"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Environment get <span class="keyword">default</span> properties:TestDriver</span><br><span class="line">Environment get self properties:<span class="keyword">null</span></span><br></pre></td></tr></table></figure><p>结论：也就是说Environment自带的只能读取默认的配置文件里面的配置信息，自定义的配置文件在Environment是读取不了的。况且在application.yml配置的都是系统自身的项，也就是不随系统环境改变而改变的配置项。一些易变的配置项我们还是自定义文件的比较好。我一般不会这么配置。</p><h3 id="2-Configurable方式读取配置文件"><a href="#2-Configurable方式读取配置文件" class="headerlink" title="2.Configurable方式读取配置文件"></a>2.Configurable方式读取配置文件</h3><p>建立类ConfigDefault 注解@Configurable</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Configurable</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigDefault</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;hank.testConfig&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String hankConfig;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;org.hank.testconfig&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String selfConfig;</span><br><span class="line"></span><br><span class="line">    getter and setter....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> ConfigDefault configDefault;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testConfigDefault</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    logger.info(<span class="string">"defualt config--hank.testConfig:"</span> + configDefault.getHankConfig());</span><br><span class="line">    logger.info(<span class="string">"self config--org.hank.testconfig:"</span> + configDefault.getSelfConfig());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果：直接报错，Could not resolve placeholder ‘org.hank.testconfig’ in value “${org.hank.testconfig}”<br>也就说application.yml文件中没有org.hank.testconfig这配置项，所以在类上加@Configurable也是默认只读取application.yml文件的配置项</p><h3 id="3-PropertySource注解方式读取配置文件"><a href="#3-PropertySource注解方式读取配置文件" class="headerlink" title="3.@PropertySource注解方式读取配置文件"></a>3.@PropertySource注解方式读取配置文件</h3><p>新建model类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@PropertySource</span>(<span class="string">"classpath:dbConfig.properties"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataBaseConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;jdbc.driver&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String driver;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;jdbc.url&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;jdbc.username&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;jdbc.password&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;hank.testConfig&#125;"</span>) <span class="comment">//测试默认配置文件</span></span><br><span class="line">    <span class="keyword">private</span> String hankConfig;</span><br><span class="line"></span><br><span class="line">    getter and setter...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> DataBaseConfig config;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGetDataBaseConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    logger.info(<span class="string">"self Config Driver:"</span> + config.getDriver());</span><br><span class="line">    logger.info(<span class="string">"default config hank.testConfig:"</span> + config.getHankConfig());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">self Config Driver:com.mysql.jdbc.Driver</span><br><span class="line"><span class="keyword">default</span> config hank.testConfig:TestDriver</span><br></pre></td></tr></table></figure><p>可以看出连同默认配置的信息也读取到了</p><p>结论：用@PropertySource(“classpath:dbConfig.properties”)<br>指定自定义配置文件路径就可以读取到自定义的配置文件信息，而对于默认配置文件application.yml我们也能在读取自定义配置文件的同时读取到默认配置文件的信息。<br>以上就是三中读取配置文件的方式，可以看到要想读取自定义的配置文件，就必须要注解指定配置文件路径。</p><h3 id="4-使用-ConfigurationProperties读取配置文件"><a href="#4-使用-ConfigurationProperties读取配置文件" class="headerlink" title="4.使用@ConfigurationProperties读取配置文件"></a>4.使用@ConfigurationProperties读取配置文件</h3><p>特別注意：</p><ul><li>需要引入spring-boot-configuration-processor依赖</li><li>这种方法适合读取大量配置属性，</li><li>@ConfigurationProperties注解的实体类必须有get/set方法</li></ul><p>新建一个实体类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"test"</span>, locations = <span class="string">"classpath:test.properties"</span>)</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String one;</span><br><span class="line">    <span class="keyword">private</span> String two;</span><br><span class="line">    <span class="keyword">private</span> String three;</span><br><span class="line">    <span class="keyword">private</span> String four;</span><br><span class="line">    <span class="keyword">private</span> String five;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置文件test.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">test.one</span>=<span class="string">one</span></span><br><span class="line"><span class="meta">test.two</span>=<span class="string">two</span></span><br><span class="line"><span class="meta">test.three</span>=<span class="string">three</span></span><br><span class="line"><span class="meta">test.four</span>=<span class="string">four</span></span><br><span class="line"><span class="meta">test.five</span>=<span class="string">five</span></span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(Test<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> Test test;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> test.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>結果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Test&#123;one=<span class="string">'one'</span>, two=<span class="string">'two'</span>, three=<span class="string">'three'</span>, four=<span class="string">'four'</span>, five=<span class="string">'five'</span>&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;概要&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Environment读取配置文件&lt;/li&gt;&lt;li&gt;Configurable方式读取配置文件&lt;/li&gt;&lt;li&gt;@PropertySource注解方式读取配置文件&lt;/li&gt;&lt;li&gt;使用@ConfigurationProperties读取配置文件&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="java" scheme="https://www.qiudx.top/categories/java/"/>
    
    
      <category term="java" scheme="https://www.qiudx.top/tags/java/"/>
    
      <category term="spring boot" scheme="https://www.qiudx.top/tags/spring-boot/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB基本使用</title>
    <link href="https://www.qiudx.top/2017/11/20/MongoDB%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <id>https://www.qiudx.top/2017/11/20/MongoDB%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</id>
    <published>2017-11-20T12:23:15.000Z</published>
    <updated>2020-01-07T10:53:27.751Z</updated>
    
    <content type="html"><![CDATA[<p><strong>概要</strong></p><ul><li>MongoDB是什么</li><li>NoSql是什么</li><li>为什么要使用NoSql</li><li>MongoDB的特点</li><li>Spring整合MongoDB<ul><li>springboot项目</li><li>非springboot项目</li></ul></li><li>相关实体类注解的解释</li></ul><a id="more"></a><h2 id="MongoDB简介"><a href="#MongoDB简介" class="headerlink" title="MongoDB简介"></a>MongoDB简介</h2><h4 id="1-MongoDB是什么"><a href="#1-MongoDB是什么" class="headerlink" title="1.MongoDB是什么"></a>1.MongoDB是什么</h4><ul><li>MongoDB是使用C++编写,开源的,面向文档的NoSql(Not Only SQL)数据库</li></ul><h4 id="2-NoSql是什么"><a href="#2-NoSql是什么" class="headerlink" title="2.NoSql是什么"></a>2.NoSql是什么</h4><ul><li>NoSql(not only sql)是非关系型数据库的统称,常见的NoSql有Redis,MongoDB,Hbase,Cassandra等</li></ul><h4 id="3-为什么要使用NoSql"><a href="#3-为什么要使用NoSql" class="headerlink" title="3.为什么要使用NoSql"></a>3.为什么要使用NoSql</h4><p><em>为了解决常规数据库以下问题</em></p><ul><li>高并发下读写压力大</li><li>海量数据的高效存储和访问</li><li>数据库的高可用和高拓展性</li></ul><h4 id="4-MongoDB的特点"><a href="#4-MongoDB的特点" class="headerlink" title="4.MongoDB的特点"></a>4.MongoDB的特点</h4><ul><li>高性能易于使用,易于拓展</li><li>面向集合存储</li><li>支持动态查询,支持索引</li><li>支持分片</li></ul><h4 id="5-Spring整合MongoDB"><a href="#5-Spring整合MongoDB" class="headerlink" title="5.Spring整合MongoDB"></a>5.Spring整合MongoDB</h4><ul><li><p>springboot项目</p><ol><li><p>依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-mongodb<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在application.perproties/yml配置mongodb的连接地址</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring.data.mongodb.uri=mongodb://127.0.0.1:27017/myMongoDB</span><br></pre></td></tr></table></figure></li><li><p>创建存储的User实体</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Id</span></span><br><span class="line">        <span class="keyword">private</span> Long id;</span><br><span class="line">        <span class="keyword">private</span> String username;</span><br><span class="line">        <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(Long id, String username, Integer age)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.id = id;</span><br><span class="line">            <span class="keyword">this</span>.username = username;</span><br><span class="line">            <span class="keyword">this</span>.age = age;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"User&#123;"</span> +</span><br><span class="line">                    <span class="string">"id="</span> + id +</span><br><span class="line">                    <span class="string">", username='"</span> + username + <span class="string">'\''</span> +</span><br><span class="line">                    <span class="string">", age="</span> + age +</span><br><span class="line">                    <span class="string">'&#125;'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实现User的数据访问对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRepository</span> <span class="keyword">extends</span> <span class="title">MongoRepository</span>&lt;<span class="title">User</span>, <span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">      <span class="function">User <span class="title">findByUsername</span><span class="params">(String username)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">MongodbConnectionTestTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserRepository userRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">protected</span> MongoTemplate mongoOperations;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 创建三个User，并验证User总数</span></span><br><span class="line">        userRepository.save(<span class="keyword">new</span> User(<span class="number">1L</span>, <span class="string">"didi"</span>, <span class="number">30</span>));</span><br><span class="line">        userRepository.save(<span class="keyword">new</span> User(<span class="number">2L</span>, <span class="string">"mama"</span>, <span class="number">40</span>));</span><br><span class="line">        userRepository.save(<span class="keyword">new</span> User(<span class="number">3L</span>, <span class="string">"kaka"</span>, <span class="number">50</span>));</span><br><span class="line">        Assert.assertEquals(<span class="number">3</span>, userRepository.findAll().size());</span><br><span class="line">        <span class="comment">// 删除一个User，再验证User总数</span></span><br><span class="line">        User u = userRepository.findOne(<span class="number">1L</span>);</span><br><span class="line">        userRepository.delete(u);</span><br><span class="line">        Assert.assertEquals(<span class="number">2</span>, userRepository.findAll().size());</span><br><span class="line">        <span class="comment">// 删除一个User，再验证User总数</span></span><br><span class="line">        u = userRepository.findByUsername(<span class="string">"mama"</span>);</span><br><span class="line">        userRepository.delete(u);</span><br><span class="line">        Assert.assertEquals(<span class="number">1</span>, userRepository.findAll().size());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        List&lt;User&gt; users = mongoOperations.findAll(User<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        users.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>非springboot项目</li></ul><ol><li>依赖<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.data<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-data-mongodb<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mongodb<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mongo-java-driver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.14.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>xml配置<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:mongo</span>=<span class="string">"http://www.springframework.org/schema/data/mongo"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">         http://www.springframework.org/schema/data/mongo http://www.springframework.org/schema/data/mongo/spring-mongo.xsd"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">      <span class="tag">&lt;<span class="name">mongo:mongo-client</span> <span class="attr">id</span>=<span class="string">"mongoClient"</span> <span class="attr">host</span>=<span class="string">"127.0.0.1"</span> <span class="attr">port</span>=<span class="string">"27017"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">          <span class="tag">&lt;<span class="name">mongo:client-options</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">connections-per-host</span>=<span class="string">"8"</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">threads-allowed-to-block-for-connection-multiplier</span>=<span class="string">"4"</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">connect-timeout</span>=<span class="string">"1000"</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">max-wait-time</span>=<span class="string">"1500"</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">socket-keep-alive</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">socket-timeout</span>=<span class="string">"1500"</span></span></span><br><span class="line"><span class="tag">          /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">mongo:mongo-client</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">      <span class="tag">&lt;<span class="name">mongo:db-factory</span> <span class="attr">id</span>=<span class="string">"mongoDbFactory"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">dbname</span>=<span class="string">"myMongoDB"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">mongo-ref</span>=<span class="string">"mongoClient"</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">      <span class="tag">&lt;<span class="name">mongo:template</span> <span class="attr">id</span>=<span class="string">"mongoTemplate"</span> <span class="attr">db-factory-ref</span>=<span class="string">"mongoDbFactory"</span> <span class="attr">write-concern</span>=<span class="string">"NORMAL"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">mongo:repositories</span> <span class="attr">base-package</span>=<span class="string">"com.xxx.core.modules.*.repository"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>创建存储的User实体<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(Long id, String username, Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"User&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", username='"</span> + username + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>实现User的数据访问对象<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRepository</span> <span class="keyword">extends</span> <span class="title">MongoRepository</span>&lt;<span class="title">User</span>, <span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">      <span class="function">User <span class="title">findByUsername</span><span class="params">(String username)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>测试</li></ol></li></ul><h4 id="6-相关实体类注解的解释"><a href="#6-相关实体类注解的解释" class="headerlink" title="6.相关实体类注解的解释"></a>6.相关实体类注解的解释</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Id</span> - 文档的唯一标识，在mongodb中为ObjectId，它是唯一的，通过时间戳+机器标识+进程ID+自增计数器（确保同一秒内产生的Id不会冲突）构成。</span><br><span class="line"></span><br><span class="line"><span class="meta">@Document</span> - 把一个java类声明为mongodb的文档，可以通过collection参数指定这个类对应的文档。<span class="meta">@Document</span>(collection=<span class="string">"mongodb"</span>) mongodb对应表</span><br><span class="line"></span><br><span class="line"><span class="meta">@DBRef</span> - 声明类似于关系数据库的关联关系。ps：暂不支持级联的保存功能，当你在本实例中修改了DERef对象里面的值时，单独保存本实例并不能保存DERef引用的对象，它要另外保存，如下面例子的Person和Account。</span><br><span class="line"></span><br><span class="line"><span class="meta">@Indexed</span> - 声明该字段需要索引，建索引可以大大的提高查询效率。</span><br><span class="line"></span><br><span class="line"><span class="meta">@CompoundIndex</span> - 复合索引的声明，建复合索引可以有效地提高多字段的查询效率。</span><br><span class="line"></span><br><span class="line"><span class="meta">@GeoSpatialIndexed</span> - 声明该字段为地理信息的索引。</span><br><span class="line"></span><br><span class="line"><span class="meta">@Transient</span> - 映射忽略的字段，该字段不会保存到mongodb。</span><br><span class="line"></span><br><span class="line"><span class="meta">@PersistenceConstructor</span> - 声明构造函数，作用是把从数据库取出的数据实例化为对象。该构造函数传入的值为从DBObject中取出的数据</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;概要&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;MongoDB是什么&lt;/li&gt;&lt;li&gt;NoSql是什么&lt;/li&gt;&lt;li&gt;为什么要使用NoSql&lt;/li&gt;&lt;li&gt;MongoDB的特点&lt;/li&gt;&lt;li&gt;Spring整合MongoDB&lt;ul&gt;&lt;li&gt;springboot项目&lt;/li&gt;&lt;li&gt;非springboot项目&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;相关实体类注解的解释&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="java" scheme="https://www.qiudx.top/categories/java/"/>
    
    
      <category term="java" scheme="https://www.qiudx.top/tags/java/"/>
    
      <category term="nosql" scheme="https://www.qiudx.top/tags/nosql/"/>
    
  </entry>
  
  <entry>
    <title>HashMap源码解析和安全性问题</title>
    <link href="https://www.qiudx.top/2017/11/18/HashMap%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E5%92%8C%E5%AE%89%E5%85%A8%E6%80%A7%E9%97%AE%E9%A2%98/"/>
    <id>https://www.qiudx.top/2017/11/18/HashMap%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E5%92%8C%E5%AE%89%E5%85%A8%E6%80%A7%E9%97%AE%E9%A2%98/</id>
    <published>2017-11-18T12:00:51.000Z</published>
    <updated>2020-01-07T10:52:49.542Z</updated>
    
    <content type="html"><![CDATA[<p><strong>概要</strong></p><ul><li>hashmap的实现</li><li>hashmap为什么是线程不安全的</li><li>JDK8 如何修复多线程扩容Bug</li></ul><a id="more"></a><h2 id="hashmap的实现"><a href="#hashmap的实现" class="headerlink" title="hashmap的实现"></a>hashmap的实现</h2><h3 id="1-hashmap的组成"><a href="#1-hashmap的组成" class="headerlink" title="1.hashmap的组成"></a>1.hashmap的组成</h3><ul><li><p>数组+链表+红黑树</p><p>HashMap的实现使用了一个数组，每个数组项里面有一个链表的方式来实现，因为HashMap使用key的hashCode来寻找存储位置，不同的key可能具有相同的hashCode，这时候就出现哈希冲突了，也叫做哈希碰撞，为了解决哈希冲突，有开放地址方法，以及链地址方法。HashMap的实现上选取了链地址方法，也就是将哈希值一样的entry保存在同一个数组项里面，可以把一个数组项当做一个桶，桶里面装的entry的key的hashCode是一样的。在Java8中当一个桶entry数量超过8时,就会转化为红黑树</p></li></ul><p><img src="/images/hashmap-composition.png" alt="img"></p><p>上面的图片展示了我们的描述，其中有一个非常重要的数据结构Node&lt;K,V&gt;，这就是实际保存我们的key-value对的数据结构，下面是这个数据结构的主要内容：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//单链表结构</span></span><br><span class="line"> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> hash;      </span><br><span class="line">        <span class="keyword">final</span> K key;</span><br><span class="line">        V value;</span><br><span class="line">        Node&lt;K,V&gt; next;</span><br><span class="line"></span><br><span class="line">        Node(<span class="keyword">int</span> hash, K key, V value, Node&lt;K,V&gt; next) &#123;</span><br><span class="line">            <span class="keyword">this</span>.hash = hash;</span><br><span class="line">            <span class="keyword">this</span>.key = key;</span><br><span class="line">            <span class="keyword">this</span>.value = value;</span><br><span class="line">            <span class="keyword">this</span>.next = next;</span><br><span class="line">        &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="2-源码解析"><a href="#2-源码解析" class="headerlink" title="2.源码解析"></a>2.源码解析</h3><h4 id="1-HashMap的put方法"><a href="#1-HashMap的put方法" class="headerlink" title="1.HashMap的put方法"></a>1.HashMap的put方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">boolean</span> onlyIfAbsent,</span></span></span><br><span class="line"><span class="function"><span class="params">               <span class="keyword">boolean</span> evict)</span> </span>&#123;</span><br><span class="line">    Node&lt;K, V&gt;[] tab;</span><br><span class="line">    Node&lt;K, V&gt; p;</span><br><span class="line">    <span class="keyword">int</span> n, i;</span><br><span class="line">    <span class="comment">// table未初始化或者长度为0，进行扩容</span></span><br><span class="line">    <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">        n = (tab = resize()).length;</span><br><span class="line">    <span class="comment">// (n - 1) &amp; hash 确定元素存放在哪个桶中，桶为空，新生成结点放入桶中(此时，这个结点是放在数组中)</span></span><br><span class="line">    <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="keyword">null</span>)</span><br><span class="line">        tab[i] = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">// 桶中已经存在元素</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        Node&lt;K, V&gt; e;</span><br><span class="line">        K k;</span><br><span class="line">        <span class="comment">// 比较桶中第一个元素(数组中的结点)的hash值相等，key相等</span></span><br><span class="line">        <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">                ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">            <span class="comment">// 将第一个元素赋值给e，用e来记录</span></span><br><span class="line">            e = p;</span><br><span class="line">            <span class="comment">// hash值不相等，即key不相等；为红黑树结点</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">            <span class="comment">// 放入树中</span></span><br><span class="line">            e = ((TreeNode&lt;K, V&gt;) p).putTreeVal(<span class="keyword">this</span>, tab, hash, key, value);</span><br><span class="line">            <span class="comment">// 为链表结点</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 在链表最末插入结点</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> binCount = <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                <span class="comment">// 到达链表的尾部</span></span><br><span class="line">                <span class="keyword">if</span> ((e = p.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// 在尾部插入新结点</span></span><br><span class="line">                    p.next = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">                    <span class="comment">// 结点数量达到阈值，转化为红黑树</span></span><br><span class="line">                    <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">                        treeifyBin(tab, hash);</span><br><span class="line">                    <span class="comment">// 跳出循环</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 判断链表中结点的key值与插入的元素的key值是否相等</span></span><br><span class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                        ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                    <span class="comment">// 相等，跳出循环</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="comment">// 用于遍历桶中的链表，与前面的e = p.next组合，可以遍历链表</span></span><br><span class="line">                p = e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 表示在桶中找到key值、hash值与插入元素相等的结点</span></span><br><span class="line">        <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 记录e的value</span></span><br><span class="line">            V oldValue = e.value;</span><br><span class="line">            <span class="comment">// onlyIfAbsent为false或者旧值为null</span></span><br><span class="line">            <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="keyword">null</span>)</span><br><span class="line">                <span class="comment">//用新值替换旧值</span></span><br><span class="line">                e.value = value;</span><br><span class="line">            <span class="comment">// 访问后回调</span></span><br><span class="line">            afterNodeAccess(e);</span><br><span class="line">            <span class="comment">// 返回旧值</span></span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 结构性修改</span></span><br><span class="line">    ++modCount;</span><br><span class="line">    <span class="comment">// 实际大小大于阈值则扩容</span></span><br><span class="line">    <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">        resize();</span><br><span class="line">    <span class="comment">// 插入后回调</span></span><br><span class="line">    afterNodeInsertion(evict);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>流程图如下</p><p><img src="/images/hashmap-put.png" alt="img"></p><h4 id="2-resize机制"><a href="#2-resize机制" class="headerlink" title="2.resize机制"></a>2.resize机制</h4><p>HashMap的扩容机制就是重新申请一个容量是当前的2倍的桶数组，然后将原先的记录逐个重新映射到新的桶里面，然后将原先的桶逐个置为null使得引用失效。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> Node&lt;K, V&gt;[] resize() &#123;</span><br><span class="line">    <span class="comment">//获得原来的table数组</span></span><br><span class="line">    Node&lt;K, V&gt;[] oldTab = table;</span><br><span class="line">    <span class="comment">//原table数组的容量</span></span><br><span class="line">    <span class="keyword">int</span> oldCap = (oldTab == <span class="keyword">null</span>) ? <span class="number">0</span> : oldTab.length;</span><br><span class="line">    <span class="comment">//原扩容阈值</span></span><br><span class="line">    <span class="keyword">int</span> oldThr = threshold;</span><br><span class="line">    <span class="comment">//定义新容量与阈值</span></span><br><span class="line">    <span class="keyword">int</span> newCap, newThr = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//如果原容量&gt;0</span></span><br><span class="line">    <span class="keyword">if</span> (oldCap &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//如果原容量已经达到最大了1&lt;&lt;30，则不进行扩容，只调整阈值为最大，随其碰撞了</span></span><br><span class="line">        <span class="keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</span><br><span class="line">            threshold = Integer.MAX_VALUE;</span><br><span class="line">            <span class="keyword">return</span> oldTab;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果没达到最大，则变为原来容量的2倍</span></span><br><span class="line">        <span class="comment">//其实这句可分解</span></span><br><span class="line">        <span class="comment">//newCap = oldCap &lt;&lt; 1</span></span><br><span class="line">        <span class="comment">//如果扩容后的容量小于最大容量才会将阈值变为原来的2倍</span></span><br><span class="line">        <span class="comment">//else if (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span></span><br><span class="line">        <span class="comment">//         newThr = oldThr &lt;&lt; 1; // double threshold</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;</span><br><span class="line">                oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class="line">            newThr = oldThr &lt;&lt; <span class="number">1</span>; <span class="comment">// double threshold</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果oldCap = 0，oldThr &gt; 0 这是适用于不同的构造函数的</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (oldThr &gt; <span class="number">0</span>) <span class="comment">// initial capacity was placed in threshold</span></span><br><span class="line">        newCap = oldThr;</span><br><span class="line">        <span class="comment">//默认构造器的处理</span></span><br><span class="line">    <span class="keyword">else</span> &#123;               <span class="comment">// zero initial threshold signifies using defaults</span></span><br><span class="line">        newCap = DEFAULT_INITIAL_CAPACITY;</span><br><span class="line">        newThr = (<span class="keyword">int</span>) (DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果扩容后的容量大于最大容量了1&lt;&lt;30</span></span><br><span class="line">    <span class="keyword">if</span> (newThr == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">float</span> ft = (<span class="keyword">float</span>) newCap * loadFactor;</span><br><span class="line">        newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class="keyword">float</span>) MAXIMUM_CAPACITY ?</span><br><span class="line">                (<span class="keyword">int</span>) ft : Integer.MAX_VALUE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//设置为新的值</span></span><br><span class="line">    threshold = newThr;</span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(&#123;<span class="string">"rawtypes"</span>, <span class="string">"unchecked"</span>&#125;)</span><br><span class="line">    Node&lt;K, V&gt;[] newTab = (Node&lt;K, V&gt;[]) <span class="keyword">new</span> Node[newCap];</span><br><span class="line">    table = newTab;</span><br><span class="line">    <span class="comment">//完成rehash</span></span><br><span class="line">    <span class="keyword">if</span> (oldTab != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//遍历原数组的每一个位置     所以rehash过程的是很耗费时间的</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; oldCap; ++j) &#123;</span><br><span class="line">            Node&lt;K, V&gt; e;</span><br><span class="line">            <span class="comment">//e = oldTab[j])</span></span><br><span class="line">            <span class="keyword">if</span> ((e = oldTab[j]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">//将原位置设为null</span></span><br><span class="line">                oldTab[j] = <span class="keyword">null</span>;</span><br><span class="line">                <span class="comment">//如果没有碰撞，也就是只有这一个元素，直接定位设置到新数组的位置</span></span><br><span class="line">                <span class="keyword">if</span> (e.next == <span class="keyword">null</span>)</span><br><span class="line">                    newTab[e.hash &amp; (newCap - <span class="number">1</span>)] = e;</span><br><span class="line">                    <span class="comment">//如果当前节点是TreeNode类型，说明已经树化了，红黑树的rehash过程</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                    ((TreeNode&lt;K, V&gt;) e).split(<span class="keyword">this</span>, newTab, j, oldCap);</span><br><span class="line">                    <span class="comment">//表明当前节点冲突是链表存储的，完成rehash   </span></span><br><span class="line">                    <span class="comment">//注意：这是1.8的优化点，这也是容量声明为2的次幂的另一个应用</span></span><br><span class="line">                <span class="keyword">else</span> &#123; <span class="comment">// preserve order</span></span><br><span class="line">                    <span class="comment">//rehash后将桶中的值重新分配</span></span><br><span class="line">                    Node&lt;K, V&gt; loHead = <span class="keyword">null</span>, loTail = <span class="keyword">null</span>;<span class="comment">//记录低位链表头尾位置</span></span><br><span class="line">                    Node&lt;K, V&gt; hiHead = <span class="keyword">null</span>, hiTail = <span class="keyword">null</span>;<span class="comment">//记录高位链表头尾位置</span></span><br><span class="line">                    Node&lt;K, V&gt; next;<span class="comment">//记录当前链表元素在原来链表中的下一个元素，便于下次循环使用</span></span><br><span class="line">                    <span class="comment">//遍历哈希桶的链表，拆分成高位和低位链表(为了更好的理解扩容,实际上只有一条单向链表)  </span></span><br><span class="line">                    <span class="keyword">do</span> &#123;</span><br><span class="line">                        next = e.next;</span><br><span class="line">                        <span class="keyword">if</span> ((e.hash &amp; oldCap) == <span class="number">0</span>) &#123; <span class="comment">//新增的有效哈希位为0，即当前元素扩容后分配到 低位链表 其实位置相比以前没变</span></span><br><span class="line">                            <span class="keyword">if</span> (loTail == <span class="keyword">null</span>) <span class="comment">//低位链表尚未初始化</span></span><br><span class="line">                                loHead = e; <span class="comment">//设置低位链表头部</span></span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                loTail.next = e; <span class="comment">//低位链表尾部增加当前元素，以保持原链表顺序</span></span><br><span class="line">                            loTail = e; <span class="comment">//更新低位链表的尾部</span></span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123; <span class="comment">//新增的有效哈希位为1，即当前元素扩容后分配到 高位链表  扩容后的位置</span></span><br><span class="line">                            <span class="keyword">if</span> (hiTail == <span class="keyword">null</span>) <span class="comment">//高低位链表尚未初始化</span></span><br><span class="line">                                hiHead = e; <span class="comment">//设置高位链表头部</span></span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                hiTail.next = e; <span class="comment">//高位链表尾部增加当前元素，以保持原链表顺序</span></span><br><span class="line">                            hiTail = e; <span class="comment">//更新高位链表的尾部</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">while</span> ((e = next) != <span class="keyword">null</span>);</span><br><span class="line">                    <span class="comment">//更新两个链表到哈希表中</span></span><br><span class="line">                    <span class="keyword">if</span> (loTail != <span class="keyword">null</span>) &#123; <span class="comment">//扩容后低位链表不为空，需要处理</span></span><br><span class="line">                        loTail.next = <span class="keyword">null</span>; <span class="comment">//低位链表设置尾部结束</span></span><br><span class="line">                        newTab[j] = loHead; <span class="comment">//哈希桶设置链表入口</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (hiTail != <span class="keyword">null</span>) &#123; <span class="comment">//扩容后高位链表不为空，需要处理</span></span><br><span class="line">                        hiTail.next = <span class="keyword">null</span>; <span class="comment">//高位链表设置尾部结束</span></span><br><span class="line">                        newTab[j + oldCap] = hiHead; <span class="comment">//哈希桶设置链表入口</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newTab;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-get方法（返回指定键所映射的值）"><a href="#3-get方法（返回指定键所映射的值）" class="headerlink" title="3.get方法（返回指定键所映射的值）"></a>3.get方法（返回指定键所映射的值）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">     Node&lt;K, V&gt; e;</span><br><span class="line">     <span class="keyword">return</span> (e = getNode(hash(key), key)) == <span class="keyword">null</span> ? <span class="keyword">null</span> : e.value;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">final</span> Node&lt;K, V&gt; <span class="title">getNode</span><span class="params">(<span class="keyword">int</span> hash, Object key)</span> </span>&#123;</span><br><span class="line">       Node&lt;K, V&gt;[] tab;</span><br><span class="line">       Node&lt;K, V&gt; first, e;</span><br><span class="line">       <span class="keyword">int</span> n;</span><br><span class="line">       K k;</span><br><span class="line">       <span class="comment">// table已经初始化，长度大于0，根据hash寻找table中的项也不为空</span></span><br><span class="line">       <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">               (first = tab[(n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">           <span class="comment">// 桶中第一项(数组元素)相等</span></span><br><span class="line">           <span class="keyword">if</span> (first.hash == hash &amp;&amp; <span class="comment">// always check first node</span></span><br><span class="line">                   ((k = first.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">               <span class="keyword">return</span> first;</span><br><span class="line">           <span class="comment">// 桶中不止一个结点</span></span><br><span class="line">           <span class="keyword">if</span> ((e = first.next) != <span class="keyword">null</span>) &#123;</span><br><span class="line">               <span class="comment">// 为红黑树结点</span></span><br><span class="line">               <span class="keyword">if</span> (first <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                   <span class="comment">// 在红黑树中查找</span></span><br><span class="line">                   <span class="keyword">return</span> ((TreeNode&lt;K, V&gt;) first).getTreeNode(hash, key);</span><br><span class="line">               <span class="comment">// 否则，在链表中查找</span></span><br><span class="line">               <span class="keyword">do</span> &#123;</span><br><span class="line">                   <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                           ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                       <span class="keyword">return</span> e;</span><br><span class="line">               &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">final</span> TreeNode&lt;K, V&gt; <span class="title">getTreeNode</span><span class="params">(<span class="keyword">int</span> h, Object k)</span> </span>&#123;</span><br><span class="line">       <span class="comment">//找到红黑树的根节点并遍历红黑树</span></span><br><span class="line">       <span class="keyword">return</span> ((parent != <span class="keyword">null</span>) ? root() : <span class="keyword">this</span>).find(h, k, <span class="keyword">null</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//找到从根p开始的节点和给定的散列和键。kc参数在第一次使用比较键时缓存了comparableClassFor。</span></span><br><span class="line">   <span class="function"><span class="keyword">final</span> TreeNode&lt;K, V&gt; <span class="title">find</span><span class="params">(<span class="keyword">int</span> h, Object k, Class&lt;?&gt; kc)</span> </span>&#123;</span><br><span class="line">       TreeNode&lt;K, V&gt; p = <span class="keyword">this</span>;</span><br><span class="line">       <span class="keyword">do</span> &#123;</span><br><span class="line">           <span class="keyword">int</span> ph, dir;</span><br><span class="line">           K pk;</span><br><span class="line">           TreeNode&lt;K, V&gt; pl = p.left, pr = p.right, q;</span><br><span class="line">           <span class="keyword">if</span> ((ph = p.hash) &gt; h)</span><br><span class="line">               p = pl;</span><br><span class="line">           <span class="keyword">else</span> <span class="keyword">if</span> (ph &lt; h)</span><br><span class="line">               p = pr;</span><br><span class="line">           <span class="keyword">else</span> <span class="keyword">if</span> ((pk = p.key) == k || (k != <span class="keyword">null</span> &amp;&amp; k.equals(pk)))</span><br><span class="line">               <span class="keyword">return</span> p;</span><br><span class="line">           <span class="keyword">else</span> <span class="keyword">if</span> (pl == <span class="keyword">null</span>)</span><br><span class="line">               p = pr;</span><br><span class="line">           <span class="keyword">else</span> <span class="keyword">if</span> (pr == <span class="keyword">null</span>)</span><br><span class="line">               p = pl;</span><br><span class="line">           <span class="keyword">else</span> <span class="keyword">if</span> ((kc != <span class="keyword">null</span> ||</span><br><span class="line">                   (kc = comparableClassFor(k)) != <span class="keyword">null</span>) &amp;&amp;</span><br><span class="line">                   (dir = compareComparables(kc, k, pk)) != <span class="number">0</span>)</span><br><span class="line">               p = (dir &lt; <span class="number">0</span>) ? pl : pr;</span><br><span class="line">           <span class="keyword">else</span> <span class="keyword">if</span> ((q = pr.find(h, k, kc)) != <span class="keyword">null</span>)</span><br><span class="line">               <span class="keyword">return</span> q;</span><br><span class="line">           <span class="keyword">else</span></span><br><span class="line">               p = pl;</span><br><span class="line">       &#125; <span class="keyword">while</span> (p != <span class="keyword">null</span>);</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="4-treeifyBin方法（将容器中的node变为treeNode）"><a href="#4-treeifyBin方法（将容器中的node变为treeNode）" class="headerlink" title="4.treeifyBin方法（将容器中的node变为treeNode）"></a>4.treeifyBin方法（将容器中的node变为treeNode）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">treeifyBin</span><span class="params">(Node&lt;K, V&gt;[] tab, <span class="keyword">int</span> hash)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, index;</span><br><span class="line">    Node&lt;K, V&gt; e;</span><br><span class="line">    <span class="keyword">if</span> (tab == <span class="keyword">null</span> || (n = tab.length) &lt; MIN_TREEIFY_CAPACITY)</span><br><span class="line">        resize();</span><br><span class="line">        <span class="comment">//Node e=tab[该hash对应的角标]，e就是这个角标下的第一个元素。  </span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ((e = tab[index = (n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        TreeNode&lt;K, V&gt; hd = <span class="keyword">null</span>, tl = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="comment">//replacementTreeNode == new TreeNode(),就是包装了一个TreeNode对象  </span></span><br><span class="line">            TreeNode&lt;K, V&gt; p = replacementTreeNode(e, <span class="keyword">null</span>);</span><br><span class="line">            <span class="keyword">if</span> (tl == <span class="keyword">null</span>)</span><br><span class="line">                <span class="comment">//遍历链表上的第一个元素的时候，t1==null，将p赋值给hd  </span></span><br><span class="line">                <span class="comment">//也就是先记录一下，方便后面的元素记录pre，next  </span></span><br><span class="line">                hd = p;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//现在p是个tree了，pre记录上一个元素  </span></span><br><span class="line">                p.prev = tl;</span><br><span class="line">                <span class="comment">//顺便把自己的引用在上一个元素上做记录  </span></span><br><span class="line">                tl.next = p;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//将当前操作的元素的引用传递给t1  </span></span><br><span class="line">            tl = p;</span><br><span class="line">            <span class="comment">//遍历整个链表，直到没有元素。  </span></span><br><span class="line">        &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">if</span> ((tab[index] = hd) != <span class="keyword">null</span>)</span><br><span class="line">            <span class="comment">//遍历完了，再执行hd.treeify方法  </span></span><br><span class="line">            <span class="comment">//hd=p是在t1==null时执行，也就是只有在第一个元素的时候执行了一次  </span></span><br><span class="line">            <span class="comment">//所以hd代表的是这个树的根。  </span></span><br><span class="line">            hd.treeify(tab);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-remove方法（移除指定键的映射关系）"><a href="#5-remove方法（移除指定键的映射关系）" class="headerlink" title="5.remove方法（移除指定键的映射关系）"></a>5.remove方法（移除指定键的映射关系）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">remove</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    Node&lt;K, V&gt; e;</span><br><span class="line">    <span class="keyword">return</span> (e = removeNode(hash(key), key, <span class="keyword">null</span>, <span class="keyword">false</span>, <span class="keyword">true</span>)) == <span class="keyword">null</span> ? <span class="keyword">null</span> : e.value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">final</span> Node&lt;K, V&gt; <span class="title">removeNode</span><span class="params">(<span class="keyword">int</span> hash, Object key, Object value, <span class="keyword">boolean</span> matchValue, <span class="keyword">boolean</span> movable)</span> </span>&#123;</span><br><span class="line">    Node&lt;K, V&gt;[] tab;</span><br><span class="line">    Node&lt;K, V&gt; p;</span><br><span class="line">    <span class="keyword">int</span> n, index;</span><br><span class="line">    <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp; (p = tab[index = (n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        Node&lt;K, V&gt; node = <span class="keyword">null</span>, e;</span><br><span class="line">        K k;</span><br><span class="line">        V v;</span><br><span class="line">        <span class="comment">// 直接命中</span></span><br><span class="line">        <span class="keyword">if</span> (p.hash == hash &amp;&amp; ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">            node = p;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((e = p.next) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 红黑树中查找</span></span><br><span class="line">            <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                node = ((TreeNode&lt;K, V&gt;) p).getTreeNode(hash, key);</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 链表中查找</span></span><br><span class="line">                <span class="keyword">do</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k)))) &#123;</span><br><span class="line">                        node = e;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    p = e;</span><br><span class="line">                &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 命中后删除</span></span><br><span class="line">        <span class="keyword">if</span> (node != <span class="keyword">null</span> &amp;&amp; (!matchValue || (v = node.value) == value || (value != <span class="keyword">null</span> &amp;&amp; value.equals(v)))) &#123;</span><br><span class="line">            <span class="keyword">if</span> (node <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                ((TreeNode&lt;K, V&gt;) node).removeTreeNode(<span class="keyword">this</span>, tab, movable);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (node == p)</span><br><span class="line">                tab[index] = node.next;  <span class="comment">// 链表首元素删除</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                p.next = node.next;  <span class="comment">//多元素链表节点删除</span></span><br><span class="line">            ++modCount;</span><br><span class="line">            --size;</span><br><span class="line">            afterNodeRemoval(node);</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="hashmap为什么是线程不安全的"><a href="#hashmap为什么是线程不安全的" class="headerlink" title="hashmap为什么是线程不安全的"></a>hashmap为什么是线程不安全的</h2><ul><li><p><strong>多线程环境put的时候导致的数据不一致问题</strong></p><p>这个问题比较好想象，比如有两个线程A和B，首先A希望插入一个key-value对到HashMap中，首先计算记录所要落到的桶的索引坐标，然后获取到该桶里面的链表头结点，此时线程A的时间片用完了，而此时线程B被调度得以执行，和线程A一样执行，只不过线程B成功将记录插到了桶里面，假设线程A插入的记录计算出来的桶索引和线程B要插入的记录计算出来的桶索引是一样的，那么当线程B成功插入之后，线程A再次被调度运行时，它依然持有过期的链表头但是它对此一无所知，以至于它认为它应该这样做，如此一来就覆盖了线程B插入的记录，这样线程B插入的记录就凭空消失了，造成了数据不一致的行为。下面是一个简单的例子</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, String&gt; hashMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">25</span>; i++) &#123;</span><br><span class="line">                hashMap.put(i + <span class="string">""</span>, i + <span class="string">""</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">25</span>; i &lt; <span class="number">50</span>; i++) &#123;</span><br><span class="line">                hashMap.put(i + <span class="string">""</span>, i + <span class="string">""</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">50</span>; i++) &#123;</span><br><span class="line">            System.out.println(i + <span class="string">"/"</span> + hashMap.get(i + <span class="string">""</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">0&#x2F;0</span><br><span class="line">1&#x2F;1</span><br><span class="line">2&#x2F;2</span><br><span class="line">3&#x2F;3</span><br><span class="line">4&#x2F;4</span><br><span class="line">5&#x2F;null</span><br><span class="line">6&#x2F;6</span><br><span class="line">7&#x2F;7</span><br><span class="line">8&#x2F;8</span><br><span class="line">9&#x2F;9</span><br><span class="line">10&#x2F;10</span><br><span class="line">11&#x2F;null</span><br><span class="line">12&#x2F;12</span><br><span class="line">13&#x2F;13</span><br><span class="line">14&#x2F;14</span><br><span class="line">15&#x2F;null</span><br><span class="line">16&#x2F;16</span><br><span class="line">17&#x2F;17</span><br><span class="line">18&#x2F;18</span><br><span class="line">19&#x2F;19</span><br><span class="line">20&#x2F;20</span><br><span class="line">21&#x2F;21</span><br><span class="line">22&#x2F;22</span><br><span class="line">23&#x2F;23</span><br><span class="line">24&#x2F;24</span><br><span class="line">25&#x2F;25</span><br><span class="line">26&#x2F;null</span><br><span class="line">27&#x2F;27</span><br><span class="line">28&#x2F;28</span><br><span class="line">29&#x2F;29</span><br><span class="line">30&#x2F;30</span><br><span class="line">31&#x2F;31</span><br><span class="line">32&#x2F;32</span><br><span class="line">33&#x2F;null</span><br><span class="line">34&#x2F;34</span><br><span class="line">35&#x2F;35</span><br><span class="line">36&#x2F;36</span><br><span class="line">37&#x2F;37</span><br><span class="line">38&#x2F;null</span><br><span class="line">39&#x2F;39</span><br><span class="line">40&#x2F;40</span><br><span class="line">41&#x2F;41</span><br><span class="line">42&#x2F;42</span><br><span class="line">43&#x2F;43</span><br><span class="line">44&#x2F;44</span><br><span class="line">45&#x2F;45</span><br><span class="line">46&#x2F;46</span><br><span class="line">47&#x2F;47</span><br><span class="line">48&#x2F;48</span><br><span class="line">49&#x2F;49</span><br></pre></td></tr></table></figure><h2 id="JDK8-如何修复多线程扩容Bug"><a href="#JDK8-如何修复多线程扩容Bug" class="headerlink" title="JDK8 如何修复多线程扩容Bug"></a>JDK8 如何修复多线程扩容Bug</h2><p>源码分析上面有</p><ul><li>JDK8 中<a href="/2017/11/18/HashMap源码解析和安全性问题/#resize机制">Node&lt;K,V&gt;[] resize()</a>每次扩容哈希表大小都增倍特性，每次扩容，一个哈希桶里的元素在扩容后的位置，只会是原位置，或者原位置+原哈希表。</li><li>扩容后，原来哈希桶的链表被拆分为两个，两个链表中的元素都能继续维持原有的顺序。这样就算在多线程环境下同时扩容，一个线程A读取链表状态后停止工作，另一个线程B对同一链表的前几个元素进行扩容分成两个链表，此时线程A恢复工作，由于线程B对链表元素的顺序没有发生变化，所以线程A恢复工作后只是重复了拆分链表的工作，而不会因为链表已被改变顺序而导致环的生成，因此不会发生死循环的问题。</li><li>也就是说 JDK8 的HashMap扩容方法不但效率提升了（根据哈希值特点拆分链表，红黑树），而且还维持了扩容前后的链表顺序，从而解决了多线程扩容使链表产生环，导致死循环的问题。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;概要&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;hashmap的实现&lt;/li&gt;&lt;li&gt;hashmap为什么是线程不安全的&lt;/li&gt;&lt;li&gt;JDK8 如何修复多线程扩容Bug&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="java" scheme="https://www.qiudx.top/categories/java/"/>
    
    
      <category term="java" scheme="https://www.qiudx.top/tags/java/"/>
    
      <category term="面试" scheme="https://www.qiudx.top/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>spring boot freemarker全局属性</title>
    <link href="https://www.qiudx.top/2017/11/17/spring-boot-freemarker%E5%85%A8%E5%B1%80%E5%B1%9E%E6%80%A7/"/>
    <id>https://www.qiudx.top/2017/11/17/spring-boot-freemarker%E5%85%A8%E5%B1%80%E5%B1%9E%E6%80%A7/</id>
    <published>2017-11-17T03:32:46.000Z</published>
    <updated>2020-01-02T01:48:42.401Z</updated>
    
    <content type="html"><![CDATA[<h3 id="在spring-boot中配置freemarker的全局属性"><a href="#在spring-boot中配置freemarker的全局属性" class="headerlink" title="在spring boot中配置freemarker的全局属性"></a>在spring boot中配置freemarker的全局属性</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FreemarkerConfiguration</span> <span class="keyword">extends</span> <span class="title">FreeMarkerAutoConfiguration</span>.<span class="title">FreeMarkerWebConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> FreeMarkerConfigurer <span class="title">freeMarkerConfigurer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">FreeMarkerConfigurer configurer = <span class="keyword">super</span>.freeMarkerConfigurer();</span><br><span class="line">Map&lt;String, Object&gt; sharedVariables = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">sharedVariables.put(<span class="string">"BASE_URL"</span>, <span class="string">"/admin"</span>);</span><br><span class="line">configurer.setFreemarkerVariables(sharedVariables);</span><br><span class="line"><span class="keyword">return</span> configurer;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;在spring-boot中配置freemarker的全局属性&quot;&gt;&lt;a href=&quot;#在spring-boot中配置freemarker的全局属性&quot; class=&quot;headerlink&quot; title=&quot;在spring boot中配置freemarker的全局属性&quot;&gt;
      
    
    </summary>
    
    
      <category term="java" scheme="https://www.qiudx.top/categories/java/"/>
    
    
      <category term="java" scheme="https://www.qiudx.top/tags/java/"/>
    
      <category term="spring boot" scheme="https://www.qiudx.top/tags/spring-boot/"/>
    
  </entry>
  
  <entry>
    <title>Docker常用命令</title>
    <link href="https://www.qiudx.top/2017/11/16/Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>https://www.qiudx.top/2017/11/16/Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</id>
    <published>2017-11-16T07:45:33.000Z</published>
    <updated>2020-01-07T10:50:35.605Z</updated>
    
    <content type="html"><![CDATA[<p><strong>概要</strong></p><ul><li>docker简介</li><li>容器相关</li><li>操作Image<a id="more"></a></li></ul><h2 id="Docker简介"><a href="#Docker简介" class="headerlink" title="Docker简介"></a>Docker简介</h2><h3 id="1-Docker的应用场景"><a href="#1-Docker的应用场景" class="headerlink" title="1.Docker的应用场景"></a>1.Docker的应用场景</h3><ul><li>Web 应用的自动化打包和发布。</li><li>自动化测试和持续集成、发布。</li><li>在服务型环境中部署和调整数据库或其他的后台应用。</li><li>从头编译或者扩展现有的OpenShift或Cloud Foundry平台来搭建自己的PaaS环境。</li></ul><h3 id="2-Docker-的优点"><a href="#2-Docker-的优点" class="headerlink" title="2.Docker 的优点"></a>2.Docker 的优点</h3><ul><li>简化程序</li><li>节省开支</li></ul><h3 id="3-Docker安装"><a href="#3-Docker安装" class="headerlink" title="3.Docker安装"></a>3.Docker安装</h3><p><strong>使用 yum 安装（CentOS 7下）</strong></p><ol><li><p>安装dockers</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum -y install docker</span><br><span class="line">service docker start</span><br></pre></td></tr></table></figure></li><li><p>配置加速器</p><ol><li><p>在<a href="https://www.daocloud.io/" target="_blank" rel="noopener">Daocloud</a>上注册账户,就可以在<a href="https://www.daocloud.io/mirror" target="_blank" rel="noopener">加速器</a>页面领取一个docker加速器的key</p></li><li><p>配置(自己查文档)</p></li></ol></li></ol><h2 id="容器相关"><a href="#容器相关" class="headerlink" title="容器相关"></a>容器相关</h2><h3 id="1-启动容器"><a href="#1-启动容器" class="headerlink" title="1.启动容器"></a>1.启动容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker run -i -t &lt;image_name/continar_id&gt; /bin/bash</span><br><span class="line">-i：表示以“交互模式”运行容器</span><br><span class="line">-t：表示容器启动后会进入其命令行</span><br><span class="line">-d：表示以守护模式执行/bin/bash脚本，此时控制台不会出现在输出终端上。</span><br><span class="line">–name：表示容器名称，用一个有意义的名称命名即可。</span><br><span class="line">-p：表示宿主机与容器的端口映射</span><br><span class="line">-v：表示需要将本地哪个目录挂载到容器中</span><br></pre></td></tr></table></figure><h3 id="2-操作容器"><a href="#2-操作容器" class="headerlink" title="2.操作容器"></a>2.操作容器</h3><ul><li><p>进入正在运行的容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker attach &lt;id、container_name&gt;</span><br></pre></td></tr></table></figure></li><li><p>后台容器执行命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec &lt;id、container_name&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-查看容器日志"><a href="#3-查看容器日志" class="headerlink" title="3.查看容器日志"></a>3.查看容器日志</h3><ul><li><p>查看容器日志</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker logs &lt;id/container_name&gt;</span><br><span class="line">-t 时间戳</span><br><span class="line">-tail 显示多少行</span><br><span class="line">-f 实时滚动</span><br></pre></td></tr></table></figure></li></ul><h3 id="4-查看容器信息"><a href="#4-查看容器信息" class="headerlink" title="4.查看容器信息"></a>4.查看容器信息</h3><ul><li><p>查看容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker ps : 查询正在运行的容器</span><br><span class="line">-a:查看所有容器</span><br><span class="line">-l:最后一次运行的容器</span><br></pre></td></tr></table></figure></li><li><p>显示一个运行的容器里面的进程信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker top Name/ID</span><br></pre></td></tr></table></figure></li><li><p>在容器中安装新的程序</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run image_name apt-get install -y app_name</span><br></pre></td></tr></table></figure></li></ul><h3 id="5-删除容器"><a href="#5-删除容器" class="headerlink" title="5.删除容器"></a>5.删除容器</h3><ul><li><p>删除单个容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm Name/ID</span><br></pre></td></tr></table></figure></li><li><p>删除全部容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm `docker ps -a -q`</span><br></pre></td></tr></table></figure></li><li><p>停止、启动、杀死、重启一个容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker stop Name/ID  </span><br><span class="line">docker start Name/ID  </span><br><span class="line">docker <span class="built_in">kill</span> Name/ID  </span><br><span class="line">docker restart name/ID</span><br></pre></td></tr></table></figure></li></ul><h2 id="Image"><a href="#Image" class="headerlink" title="Image"></a>Image</h2><h3 id="1-列出镜像"><a href="#1-列出镜像" class="headerlink" title="1.列出镜像"></a>1.列出镜像</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo docker images</span><br><span class="line">-a, –all=false Show all images;</span><br><span class="line">no-trunc=false Don’t truncate output;</span><br><span class="line">-q, –quiet=false Only show numeric IDs</span><br></pre></td></tr></table></figure><h3 id="2-下载image"><a href="#2-下载image" class="headerlink" title="2.下载image"></a>2.下载image</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search image_name</span><br></pre></td></tr></table></figure><h3 id="3-删除一个或者多个镜像"><a href="#3-删除一个或者多个镜像" class="headerlink" title="3.删除一个或者多个镜像;"></a>3.删除一个或者多个镜像;</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker rmi image_name  </span><br><span class="line">-f, –force=false Force;</span><br><span class="line">–no-prune=false Do not delete untagged parents</span><br></pre></td></tr></table></figure><h3 id="4-显示一个镜像的历史"><a href="#4-显示一个镜像的历史" class="headerlink" title="4.显示一个镜像的历史;"></a>4.显示一个镜像的历史;</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker history image_name</span><br></pre></td></tr></table></figure><h3 id="5-发布docker镜像"><a href="#5-发布docker镜像" class="headerlink" title="5.发布docker镜像"></a>5.发布docker镜像</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker push new_image_name</span><br></pre></td></tr></table></figure><h3 id="6-拉取docker镜像"><a href="#6-拉取docker镜像" class="headerlink" title="6.拉取docker镜像"></a>6.拉取docker镜像</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull image_name</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;概要&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;docker简介&lt;/li&gt;&lt;li&gt;容器相关&lt;/li&gt;&lt;li&gt;操作Image
    
    </summary>
    
    
      <category term="linux" scheme="https://www.qiudx.top/categories/linux/"/>
    
    
      <category term="linux" scheme="https://www.qiudx.top/tags/linux/"/>
    
      <category term="docker" scheme="https://www.qiudx.top/tags/docker/"/>
    
  </entry>
  
</feed>
